// This code contains NVIDIA Confidential Information and is disclosed to you 
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and 
// any modifications thereto. Any use, reproduction, disclosure, or 
// distribution of this software and related documentation without an express 
// license agreement from NVIDIA Corporation is strictly prohibited.
// 
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2011 NVIDIA Corporation. All rights reserved.
// Copyright (c) 2004-2008 AGEIA Technologies, Inc. All rights reserved.
// Copyright (c) 2001-2004 NovodeX AG. All rights reserved.

// This code is auto-generated by the PhysX Clang metadata generator.  Do not edit or be
// prepared for your edits to be quietly ignored next time the clang metadata generator is
// run.  You can find the most recent version of clang metadata generator by contacting
// Chris Nuernberger <chrisn@nvidia.com> or Dilip or Adam.
// The source code for the generate was at one time checked into:
// physx/PhysXMetaDataGenerator/llvm/tools/clang/lib/Frontend/PhysXMetaDataAction.cpp
#include "PxMetaDataObjects.h"
#include "PxPhysicsAPI.h"
#include "PsIntrinsics.h"
using namespace physx;
_Bool getPxHeightFieldDesc_IsValid( const PxHeightFieldDesc* inObj ) { return inObj->isValid(); }
inline PxU32 getPxHeightFieldDescNbRows( const PxHeightFieldDesc* inOwner ) { return inOwner->nbRows; }
inline void setPxHeightFieldDescNbRows( PxHeightFieldDesc* inOwner, PxU32 inData) { inOwner->nbRows = inData; }
inline PxU32 getPxHeightFieldDescNbColumns( const PxHeightFieldDesc* inOwner ) { return inOwner->nbColumns; }
inline void setPxHeightFieldDescNbColumns( PxHeightFieldDesc* inOwner, PxU32 inData) { inOwner->nbColumns = inData; }
inline PxHeightFieldFormat::Enum getPxHeightFieldDescFormat( const PxHeightFieldDesc* inOwner ) { return inOwner->format; }
inline void setPxHeightFieldDescFormat( PxHeightFieldDesc* inOwner, PxHeightFieldFormat::Enum inData) { inOwner->format = inData; }
inline PxStridedData getPxHeightFieldDescSamples( const PxHeightFieldDesc* inOwner ) { return inOwner->samples; }
inline void setPxHeightFieldDescSamples( PxHeightFieldDesc* inOwner, PxStridedData inData) { inOwner->samples = inData; }
inline PxReal getPxHeightFieldDescThickness( const PxHeightFieldDesc* inOwner ) { return inOwner->thickness; }
inline void setPxHeightFieldDescThickness( PxHeightFieldDesc* inOwner, PxReal inData) { inOwner->thickness = inData; }
inline PxReal getPxHeightFieldDescConvexEdgeThreshold( const PxHeightFieldDesc* inOwner ) { return inOwner->convexEdgeThreshold; }
inline void setPxHeightFieldDescConvexEdgeThreshold( PxHeightFieldDesc* inOwner, PxReal inData) { inOwner->convexEdgeThreshold = inData; }
inline PxHeightFieldFlags getPxHeightFieldDescFlags( const PxHeightFieldDesc* inOwner ) { return inOwner->flags; }
inline void setPxHeightFieldDescFlags( PxHeightFieldDesc* inOwner, PxHeightFieldFlags inData) { inOwner->flags = inData; }
PX_PHYSX_CORE_API PxHeightFieldDescGeneratedInfo::PxHeightFieldDescGeneratedInfo()
	: IsValid( "IsValid", getPxHeightFieldDesc_IsValid)
	, NbRows( "NbRows", setPxHeightFieldDescNbRows, getPxHeightFieldDescNbRows )
	, NbColumns( "NbColumns", setPxHeightFieldDescNbColumns, getPxHeightFieldDescNbColumns )
	, Format( "Format", setPxHeightFieldDescFormat, getPxHeightFieldDescFormat )
	, Samples( "Samples", setPxHeightFieldDescSamples, getPxHeightFieldDescSamples )
	, Thickness( "Thickness", setPxHeightFieldDescThickness, getPxHeightFieldDescThickness )
	, ConvexEdgeThreshold( "ConvexEdgeThreshold", setPxHeightFieldDescConvexEdgeThreshold, getPxHeightFieldDescConvexEdgeThreshold )
	, Flags( "Flags", setPxHeightFieldDescFlags, getPxHeightFieldDescFlags )
{}
PX_PHYSX_CORE_API PxHeightFieldDescGeneratedValues::PxHeightFieldDescGeneratedValues( const PxHeightFieldDesc* inSource )
		:IsValid( getPxHeightFieldDesc_IsValid( inSource ) )
		,NbRows( inSource->nbRows )
		,NbColumns( inSource->nbColumns )
		,Format( inSource->format )
		,Samples( inSource->samples )
		,Thickness( inSource->thickness )
		,ConvexEdgeThreshold( inSource->convexEdgeThreshold )
		,Flags( inSource->flags )
{
}
PxGeometryType::Enum getPxShape_GeometryType( const PxShape* inObj ) { return inObj->getGeometryType(); }
void setPxShape_Geometry( PxShape* inObj, const PxGeometry & inArg){ inObj->setGeometry( inArg ); }
PxBounds3 getPxShape_WorldBounds( const PxShape* inObj ) { return inObj->getWorldBounds(); }
void setPxShape_LocalPose( PxShape* inObj, const PxTransform & inArg){ inObj->setLocalPose( inArg ); }
PxTransform getPxShape_LocalPose( const PxShape* inObj ) { return inObj->getLocalPose(); }
void setPxShape_SimulationFilterData( PxShape* inObj, const PxFilterData & inArg){ inObj->setSimulationFilterData( inArg ); }
PxFilterData getPxShape_SimulationFilterData( const PxShape* inObj ) { return inObj->getSimulationFilterData(); }
void setPxShape_QueryFilterData( PxShape* inObj, const PxFilterData & inArg){ inObj->setQueryFilterData( inArg ); }
PxFilterData getPxShape_QueryFilterData( const PxShape* inObj ) { return inObj->getQueryFilterData(); }
PxU32 getPxShape_Materials( const PxShape* inObj, PxMaterial ** outBuffer, PxU32 inBufSize ) { return inObj->getMaterials( outBuffer, inBufSize ); }
PxU32 getNbPxShape_Materials( const PxShape* inObj ) { return inObj->getNbMaterials(  ); }
void setPxShape_ContactOffset( PxShape* inObj, PxReal inArg){ inObj->setContactOffset( inArg ); }
PxReal getPxShape_ContactOffset( const PxShape* inObj ) { return inObj->getContactOffset(); }
void setPxShape_RestOffset( PxShape* inObj, PxReal inArg){ inObj->setRestOffset( inArg ); }
PxReal getPxShape_RestOffset( const PxShape* inObj ) { return inObj->getRestOffset(); }
void setPxShape_Flags( PxShape* inObj, PxShapeFlags inArg){ inObj->setFlags( inArg ); }
PxShapeFlags getPxShape_Flags( const PxShape* inObj ) { return inObj->getFlags(); }
void setPxShape_Name( PxShape* inObj, const char * inArg){ inObj->setName( inArg ); }
const char * getPxShape_Name( const PxShape* inObj ) { return inObj->getName(); }
inline void * getPxShapeUserData( const PxShape* inOwner ) { return inOwner->userData; }
inline void setPxShapeUserData( PxShape* inOwner, void * inData) { inOwner->userData = inData; }
PX_PHYSX_CORE_API PxShapeGeneratedInfo::PxShapeGeneratedInfo()
	: GeometryType( "GeometryType", getPxShape_GeometryType)
	, Geometry( "Geometry", setPxShape_Geometry)
	, WorldBounds( "WorldBounds", getPxShape_WorldBounds)
	, LocalPose( "LocalPose", setPxShape_LocalPose, getPxShape_LocalPose)
	, SimulationFilterData( "SimulationFilterData", setPxShape_SimulationFilterData, getPxShape_SimulationFilterData)
	, QueryFilterData( "QueryFilterData", setPxShape_QueryFilterData, getPxShape_QueryFilterData)
	, Materials( "Materials", getPxShape_Materials, getNbPxShape_Materials )
	, ContactOffset( "ContactOffset", setPxShape_ContactOffset, getPxShape_ContactOffset)
	, RestOffset( "RestOffset", setPxShape_RestOffset, getPxShape_RestOffset)
	, Flags( "Flags", setPxShape_Flags, getPxShape_Flags)
	, Name( "Name", setPxShape_Name, getPxShape_Name)
	, UserData( "UserData", setPxShapeUserData, getPxShapeUserData )
{}
PX_PHYSX_CORE_API PxShapeGeneratedValues::PxShapeGeneratedValues( const PxShape* inSource )
		:GeometryType( getPxShape_GeometryType( inSource ) )
		,WorldBounds( getPxShape_WorldBounds( inSource ) )
		,LocalPose( getPxShape_LocalPose( inSource ) )
		,SimulationFilterData( getPxShape_SimulationFilterData( inSource ) )
		,QueryFilterData( getPxShape_QueryFilterData( inSource ) )
		,ContactOffset( getPxShape_ContactOffset( inSource ) )
		,RestOffset( getPxShape_RestOffset( inSource ) )
		,Flags( getPxShape_Flags( inSource ) )
		,Name( getPxShape_Name( inSource ) )
		,UserData( inSource->userData )
{
}
const char * getPxActor_ClassName( const PxActor* inObj ) { return inObj->getClassName(); }
PxActorType::Enum getPxActor_Type( const PxActor* inObj ) { return inObj->getType(); }
PxScene * getPxActor_Scene( const PxActor* inObj ) { return inObj->getScene(); }
void setPxActor_Name( PxActor* inObj, const char * inArg){ inObj->setName( inArg ); }
const char * getPxActor_Name( const PxActor* inObj ) { return inObj->getName(); }
PxBounds3 getPxActor_WorldBounds( const PxActor* inObj ) { return inObj->getWorldBounds(); }
void setPxActor_ActorFlags( PxActor* inObj, PxActorFlags inArg){ inObj->setActorFlags( inArg ); }
PxActorFlags getPxActor_ActorFlags( const PxActor* inObj ) { return inObj->getActorFlags(); }
void setPxActor_DominanceGroup( PxActor* inObj, PxDominanceGroup inArg){ inObj->setDominanceGroup( inArg ); }
PxDominanceGroup getPxActor_DominanceGroup( const PxActor* inObj ) { return inObj->getDominanceGroup(); }
void setPxActor_OwnerClient( PxActor* inObj, PxClientID inArg){ inObj->setOwnerClient( inArg ); }
PxClientID getPxActor_OwnerClient( const PxActor* inObj ) { return inObj->getOwnerClient(); }
void setPxActor_ClientBehaviorBits( PxActor* inObj, PxU32 inArg){ inObj->setClientBehaviorBits( inArg ); }
PxU32 getPxActor_ClientBehaviorBits( const PxActor* inObj ) { return inObj->getClientBehaviorBits(); }
PxAggregate * getPxActor_Aggregate( const PxActor* inObj ) { return inObj->getAggregate(); }
inline void * getPxActorUserData( const PxActor* inOwner ) { return inOwner->userData; }
inline void setPxActorUserData( PxActor* inOwner, void * inData) { inOwner->userData = inData; }
PX_PHYSX_CORE_API PxActorGeneratedInfo::PxActorGeneratedInfo()
	: ClassName( "ClassName", getPxActor_ClassName)
	, Type( "Type", getPxActor_Type)
	, Scene( "Scene", getPxActor_Scene)
	, Name( "Name", setPxActor_Name, getPxActor_Name)
	, WorldBounds( "WorldBounds", getPxActor_WorldBounds)
	, ActorFlags( "ActorFlags", setPxActor_ActorFlags, getPxActor_ActorFlags)
	, DominanceGroup( "DominanceGroup", setPxActor_DominanceGroup, getPxActor_DominanceGroup)
	, OwnerClient( "OwnerClient", setPxActor_OwnerClient, getPxActor_OwnerClient)
	, ClientBehaviorBits( "ClientBehaviorBits", setPxActor_ClientBehaviorBits, getPxActor_ClientBehaviorBits)
	, Aggregate( "Aggregate", getPxActor_Aggregate)
	, UserData( "UserData", setPxActorUserData, getPxActorUserData )
{}
PX_PHYSX_CORE_API PxActorGeneratedValues::PxActorGeneratedValues( const PxActor* inSource )
		:ClassName( getPxActor_ClassName( inSource ) )
		,Type( getPxActor_Type( inSource ) )
		,Scene( getPxActor_Scene( inSource ) )
		,Name( getPxActor_Name( inSource ) )
		,WorldBounds( getPxActor_WorldBounds( inSource ) )
		,ActorFlags( getPxActor_ActorFlags( inSource ) )
		,DominanceGroup( getPxActor_DominanceGroup( inSource ) )
		,OwnerClient( getPxActor_OwnerClient( inSource ) )
		,ClientBehaviorBits( getPxActor_ClientBehaviorBits( inSource ) )
		,Aggregate( getPxActor_Aggregate( inSource ) )
		,UserData( inSource->userData )
{
}
const char * getPxRigidActor_ClassName( const PxRigidActor* inObj ) { return inObj->getClassName(); }
void setPxRigidActor_GlobalPose( PxRigidActor* inObj, const PxTransform & inArg){ inObj->setGlobalPose( inArg ); }
PxTransform getPxRigidActor_GlobalPose( const PxRigidActor* inObj ) { return inObj->getGlobalPose(); }
PxU32 getPxRigidActor_Shapes( const PxRigidActor* inObj, PxShape ** outBuffer, PxU32 inBufSize ) { return inObj->getShapes( outBuffer, inBufSize ); }
PxU32 getNbPxRigidActor_Shapes( const PxRigidActor* inObj ) { return inObj->getNbShapes(  ); }
PxU32 getPxRigidActor_Constraints( const PxRigidActor* inObj, PxConstraint ** outBuffer, PxU32 inBufSize ) { return inObj->getConstraints( outBuffer, inBufSize ); }
PxU32 getNbPxRigidActor_Constraints( const PxRigidActor* inObj ) { return inObj->getNbConstraints(  ); }
PX_PHYSX_CORE_API PxRigidActorGeneratedInfo::PxRigidActorGeneratedInfo()
	: ClassName( "ClassName", getPxRigidActor_ClassName)
	, GlobalPose( "GlobalPose", setPxRigidActor_GlobalPose, getPxRigidActor_GlobalPose)
	, Shapes( "Shapes", getPxRigidActor_Shapes, getNbPxRigidActor_Shapes )
	, Constraints( "Constraints", getPxRigidActor_Constraints, getNbPxRigidActor_Constraints )
{}
PX_PHYSX_CORE_API PxRigidActorGeneratedValues::PxRigidActorGeneratedValues( const PxRigidActor* inSource )
		:PxActorGeneratedValues( inSource )
		,ClassName( getPxRigidActor_ClassName( inSource ) )
		,GlobalPose( getPxRigidActor_GlobalPose( inSource ) )
{
}
PX_PHYSX_CORE_API PxRigidStaticGeneratedInfo::PxRigidStaticGeneratedInfo()
{}
PX_PHYSX_CORE_API PxRigidStaticGeneratedValues::PxRigidStaticGeneratedValues( const PxRigidStatic* inSource )
		:PxRigidActorGeneratedValues( inSource )
{
}
void setPxRigidBody_CMassLocalPose( PxRigidBody* inObj, const PxTransform & inArg){ inObj->setCMassLocalPose( inArg ); }
PxTransform getPxRigidBody_CMassLocalPose( const PxRigidBody* inObj ) { return inObj->getCMassLocalPose(); }
void setPxRigidBody_Mass( PxRigidBody* inObj, PxReal inArg){ inObj->setMass( inArg ); }
PxReal getPxRigidBody_Mass( const PxRigidBody* inObj ) { return inObj->getMass(); }
void setPxRigidBody_MassSpaceInertiaTensor( PxRigidBody* inObj, const PxVec3 & inArg){ inObj->setMassSpaceInertiaTensor( inArg ); }
PxVec3 getPxRigidBody_MassSpaceInertiaTensor( const PxRigidBody* inObj ) { return inObj->getMassSpaceInertiaTensor(); }
void setPxRigidBody_LinearVelocity( PxRigidBody* inObj, const PxVec3 & inArg){ inObj->setLinearVelocity( inArg ); }
PxVec3 getPxRigidBody_LinearVelocity( const PxRigidBody* inObj ) { return inObj->getLinearVelocity(); }
void setPxRigidBody_AngularVelocity( PxRigidBody* inObj, const PxVec3 & inArg){ inObj->setAngularVelocity( inArg ); }
PxVec3 getPxRigidBody_AngularVelocity( const PxRigidBody* inObj ) { return inObj->getAngularVelocity(); }
PX_PHYSX_CORE_API PxRigidBodyGeneratedInfo::PxRigidBodyGeneratedInfo()
	: CMassLocalPose( "CMassLocalPose", setPxRigidBody_CMassLocalPose, getPxRigidBody_CMassLocalPose)
	, Mass( "Mass", setPxRigidBody_Mass, getPxRigidBody_Mass)
	, MassSpaceInertiaTensor( "MassSpaceInertiaTensor", setPxRigidBody_MassSpaceInertiaTensor, getPxRigidBody_MassSpaceInertiaTensor)
	, LinearVelocity( "LinearVelocity", setPxRigidBody_LinearVelocity, getPxRigidBody_LinearVelocity)
	, AngularVelocity( "AngularVelocity", setPxRigidBody_AngularVelocity, getPxRigidBody_AngularVelocity)
{}
PX_PHYSX_CORE_API PxRigidBodyGeneratedValues::PxRigidBodyGeneratedValues( const PxRigidBody* inSource )
		:PxRigidActorGeneratedValues( inSource )
		,CMassLocalPose( getPxRigidBody_CMassLocalPose( inSource ) )
		,Mass( getPxRigidBody_Mass( inSource ) )
		,MassSpaceInertiaTensor( getPxRigidBody_MassSpaceInertiaTensor( inSource ) )
		,LinearVelocity( getPxRigidBody_LinearVelocity( inSource ) )
		,AngularVelocity( getPxRigidBody_AngularVelocity( inSource ) )
{
}
void setPxRigidDynamic_LinearDamping( PxRigidDynamic* inObj, PxReal inArg){ inObj->setLinearDamping( inArg ); }
PxReal getPxRigidDynamic_LinearDamping( const PxRigidDynamic* inObj ) { return inObj->getLinearDamping(); }
void setPxRigidDynamic_AngularDamping( PxRigidDynamic* inObj, PxReal inArg){ inObj->setAngularDamping( inArg ); }
PxReal getPxRigidDynamic_AngularDamping( const PxRigidDynamic* inObj ) { return inObj->getAngularDamping(); }
void setPxRigidDynamic_MaxAngularVelocity( PxRigidDynamic* inObj, PxReal inArg){ inObj->setMaxAngularVelocity( inArg ); }
PxReal getPxRigidDynamic_MaxAngularVelocity( const PxRigidDynamic* inObj ) { return inObj->getMaxAngularVelocity(); }
_Bool getPxRigidDynamic_IsSleeping( const PxRigidDynamic* inObj ) { return inObj->isSleeping(); }
void setPxRigidDynamic_SleepThreshold( PxRigidDynamic* inObj, PxReal inArg){ inObj->setSleepThreshold( inArg ); }
PxReal getPxRigidDynamic_SleepThreshold( const PxRigidDynamic* inObj ) { return inObj->getSleepThreshold(); }
void setPxRigidDynamic_SolverIterationCounts( PxRigidDynamic* inObj, PxU32 inArg0, PxU32 inArg1 ) { inObj->setSolverIterationCounts( inArg0, inArg1 ); }
void getPxRigidDynamic_SolverIterationCounts( const PxRigidDynamic* inObj, PxU32& inArg0, PxU32& inArg1 ) { inObj->getSolverIterationCounts( inArg0, inArg1 ); }
void setPxRigidDynamic_ContactReportThreshold( PxRigidDynamic* inObj, PxReal inArg){ inObj->setContactReportThreshold( inArg ); }
PxReal getPxRigidDynamic_ContactReportThreshold( const PxRigidDynamic* inObj ) { return inObj->getContactReportThreshold(); }
void setPxRigidDynamic_RigidDynamicFlags( PxRigidDynamic* inObj, PxRigidDynamicFlags inArg){ inObj->setRigidDynamicFlags( inArg ); }
PxRigidDynamicFlags getPxRigidDynamic_RigidDynamicFlags( const PxRigidDynamic* inObj ) { return inObj->getRigidDynamicFlags(); }
PX_PHYSX_CORE_API PxRigidDynamicGeneratedInfo::PxRigidDynamicGeneratedInfo()
	: LinearDamping( "LinearDamping", setPxRigidDynamic_LinearDamping, getPxRigidDynamic_LinearDamping)
	, AngularDamping( "AngularDamping", setPxRigidDynamic_AngularDamping, getPxRigidDynamic_AngularDamping)
	, MaxAngularVelocity( "MaxAngularVelocity", setPxRigidDynamic_MaxAngularVelocity, getPxRigidDynamic_MaxAngularVelocity)
	, IsSleeping( "IsSleeping", getPxRigidDynamic_IsSleeping)
	, SleepThreshold( "SleepThreshold", setPxRigidDynamic_SleepThreshold, getPxRigidDynamic_SleepThreshold)
	, SolverIterationCounts( "SolverIterationCounts", "minPositionIters", "minVelocityIters", setPxRigidDynamic_SolverIterationCounts, getPxRigidDynamic_SolverIterationCounts)
	, ContactReportThreshold( "ContactReportThreshold", setPxRigidDynamic_ContactReportThreshold, getPxRigidDynamic_ContactReportThreshold)
	, RigidDynamicFlags( "RigidDynamicFlags", setPxRigidDynamic_RigidDynamicFlags, getPxRigidDynamic_RigidDynamicFlags)
{}
PX_PHYSX_CORE_API PxRigidDynamicGeneratedValues::PxRigidDynamicGeneratedValues( const PxRigidDynamic* inSource )
		:PxRigidBodyGeneratedValues( inSource )
		,LinearDamping( getPxRigidDynamic_LinearDamping( inSource ) )
		,AngularDamping( getPxRigidDynamic_AngularDamping( inSource ) )
		,MaxAngularVelocity( getPxRigidDynamic_MaxAngularVelocity( inSource ) )
		,IsSleeping( getPxRigidDynamic_IsSleeping( inSource ) )
		,SleepThreshold( getPxRigidDynamic_SleepThreshold( inSource ) )
		,ContactReportThreshold( getPxRigidDynamic_ContactReportThreshold( inSource ) )
		,RigidDynamicFlags( getPxRigidDynamic_RigidDynamicFlags( inSource ) )
{
	getPxRigidDynamic_SolverIterationCounts( inSource, SolverIterationCounts[0], SolverIterationCounts[1] );
}
const char * getPxConstraint_ClassName( const PxConstraint* inObj ) { return inObj->getClassName(); }
PxScene * getPxConstraint_Scene( const PxConstraint* inObj ) { return inObj->getScene(); }
void setPxConstraint_Actors( PxConstraint* inObj, PxRigidActor * inArg0, PxRigidActor * inArg1 ) { inObj->setActors( inArg0, inArg1 ); }
void getPxConstraint_Actors( const PxConstraint* inObj, PxRigidActor *& inArg0, PxRigidActor *& inArg1 ) { inObj->getActors( inArg0, inArg1 ); }
void setPxConstraint_Flags( PxConstraint* inObj, PxConstraintFlags inArg){ inObj->setFlags( inArg ); }
PxConstraintFlags getPxConstraint_Flags( const PxConstraint* inObj ) { return inObj->getFlags(); }
void setPxConstraint_BreakForce( PxConstraint* inObj, PxReal inArg0, PxReal inArg1 ) { inObj->setBreakForce( inArg0, inArg1 ); }
void getPxConstraint_BreakForce( const PxConstraint* inObj, PxReal& inArg0, PxReal& inArg1 ) { inObj->getBreakForce( inArg0, inArg1 ); }
PX_PHYSX_CORE_API PxConstraintGeneratedInfo::PxConstraintGeneratedInfo()
	: ClassName( "ClassName", getPxConstraint_ClassName)
	, Scene( "Scene", getPxConstraint_Scene)
	, Actors( "Actors", "actor0", "actor1", setPxConstraint_Actors, getPxConstraint_Actors)
	, Flags( "Flags", setPxConstraint_Flags, getPxConstraint_Flags)
	, BreakForce( "BreakForce", "linear", "angular", setPxConstraint_BreakForce, getPxConstraint_BreakForce)
{}
PX_PHYSX_CORE_API PxConstraintGeneratedValues::PxConstraintGeneratedValues( const PxConstraint* inSource )
		:ClassName( getPxConstraint_ClassName( inSource ) )
		,Scene( getPxConstraint_Scene( inSource ) )
		,Flags( getPxConstraint_Flags( inSource ) )
{
	getPxConstraint_Actors( inSource, Actors[0], Actors[1] );
	getPxConstraint_BreakForce( inSource, BreakForce[0], BreakForce[1] );
}
PxScene * getPxArticulation_Scene( const PxArticulation* inObj ) { return inObj->getScene(); }
void setPxArticulation_MaxProjectionIterations( PxArticulation* inObj, PxU32 inArg){ inObj->setMaxProjectionIterations( inArg ); }
PxU32 getPxArticulation_MaxProjectionIterations( const PxArticulation* inObj ) { return inObj->getMaxProjectionIterations(); }
void setPxArticulation_SeparationTolerance( PxArticulation* inObj, PxReal inArg){ inObj->setSeparationTolerance( inArg ); }
PxReal getPxArticulation_SeparationTolerance( const PxArticulation* inObj ) { return inObj->getSeparationTolerance(); }
void setPxArticulation_InternalDriveIterations( PxArticulation* inObj, PxU32 inArg){ inObj->setInternalDriveIterations( inArg ); }
PxU32 getPxArticulation_InternalDriveIterations( const PxArticulation* inObj ) { return inObj->getInternalDriveIterations(); }
void setPxArticulation_ExternalDriveIterations( PxArticulation* inObj, PxU32 inArg){ inObj->setExternalDriveIterations( inArg ); }
PxU32 getPxArticulation_ExternalDriveIterations( const PxArticulation* inObj ) { return inObj->getExternalDriveIterations(); }
void setPxArticulation_SolverIterationCounts( PxArticulation* inObj, PxU32 inArg0, PxU32 inArg1 ) { inObj->setSolverIterationCounts( inArg0, inArg1 ); }
void getPxArticulation_SolverIterationCounts( const PxArticulation* inObj, PxU32& inArg0, PxU32& inArg1 ) { inObj->getSolverIterationCounts( inArg0, inArg1 ); }
_Bool getPxArticulation_IsSleeping( const PxArticulation* inObj ) { return inObj->isSleeping(); }
void setPxArticulation_SleepThreshold( PxArticulation* inObj, PxReal inArg){ inObj->setSleepThreshold( inArg ); }
PxReal getPxArticulation_SleepThreshold( const PxArticulation* inObj ) { return inObj->getSleepThreshold(); }
PxU32 getPxArticulation_Links( const PxArticulation* inObj, PxArticulationLink ** outBuffer, PxU32 inBufSize ) { return inObj->getLinks( outBuffer, inBufSize ); }
PxU32 getNbPxArticulation_Links( const PxArticulation* inObj ) { return inObj->getNbLinks(  ); }
void setPxArticulation_Name( PxArticulation* inObj, const char * inArg){ inObj->setName( inArg ); }
const char * getPxArticulation_Name( const PxArticulation* inObj ) { return inObj->getName(); }
PxBounds3 getPxArticulation_WorldBounds( const PxArticulation* inObj ) { return inObj->getWorldBounds(); }
PxAggregate * getPxArticulation_Aggregate( const PxArticulation* inObj ) { return inObj->getAggregate(); }
inline void * getPxArticulationUserData( const PxArticulation* inOwner ) { return inOwner->userData; }
inline void setPxArticulationUserData( PxArticulation* inOwner, void * inData) { inOwner->userData = inData; }
PX_PHYSX_CORE_API PxArticulationGeneratedInfo::PxArticulationGeneratedInfo()
	: Scene( "Scene", getPxArticulation_Scene)
	, MaxProjectionIterations( "MaxProjectionIterations", setPxArticulation_MaxProjectionIterations, getPxArticulation_MaxProjectionIterations)
	, SeparationTolerance( "SeparationTolerance", setPxArticulation_SeparationTolerance, getPxArticulation_SeparationTolerance)
	, InternalDriveIterations( "InternalDriveIterations", setPxArticulation_InternalDriveIterations, getPxArticulation_InternalDriveIterations)
	, ExternalDriveIterations( "ExternalDriveIterations", setPxArticulation_ExternalDriveIterations, getPxArticulation_ExternalDriveIterations)
	, SolverIterationCounts( "SolverIterationCounts", "minPositionIters", "minVelocityIters", setPxArticulation_SolverIterationCounts, getPxArticulation_SolverIterationCounts)
	, IsSleeping( "IsSleeping", getPxArticulation_IsSleeping)
	, SleepThreshold( "SleepThreshold", setPxArticulation_SleepThreshold, getPxArticulation_SleepThreshold)
	, Links( "Links", getPxArticulation_Links, getNbPxArticulation_Links )
	, Name( "Name", setPxArticulation_Name, getPxArticulation_Name)
	, WorldBounds( "WorldBounds", getPxArticulation_WorldBounds)
	, Aggregate( "Aggregate", getPxArticulation_Aggregate)
	, UserData( "UserData", setPxArticulationUserData, getPxArticulationUserData )
{}
PX_PHYSX_CORE_API PxArticulationGeneratedValues::PxArticulationGeneratedValues( const PxArticulation* inSource )
		:Scene( getPxArticulation_Scene( inSource ) )
		,MaxProjectionIterations( getPxArticulation_MaxProjectionIterations( inSource ) )
		,SeparationTolerance( getPxArticulation_SeparationTolerance( inSource ) )
		,InternalDriveIterations( getPxArticulation_InternalDriveIterations( inSource ) )
		,ExternalDriveIterations( getPxArticulation_ExternalDriveIterations( inSource ) )
		,IsSleeping( getPxArticulation_IsSleeping( inSource ) )
		,SleepThreshold( getPxArticulation_SleepThreshold( inSource ) )
		,Name( getPxArticulation_Name( inSource ) )
		,WorldBounds( getPxArticulation_WorldBounds( inSource ) )
		,Aggregate( getPxArticulation_Aggregate( inSource ) )
		,UserData( inSource->userData )
{
	getPxArticulation_SolverIterationCounts( inSource, SolverIterationCounts[0], SolverIterationCounts[1] );
}
void setPxParticleBase_Damping( PxParticleBase* inObj, PxReal inArg){ inObj->setDamping( inArg ); }
PxReal getPxParticleBase_Damping( const PxParticleBase* inObj ) { return inObj->getDamping(); }
void setPxParticleBase_ExternalAcceleration( PxParticleBase* inObj, const PxVec3 & inArg){ inObj->setExternalAcceleration( inArg ); }
PxVec3 getPxParticleBase_ExternalAcceleration( const PxParticleBase* inObj ) { return inObj->getExternalAcceleration(); }
void setPxParticleBase_ParticleMass( PxParticleBase* inObj, PxReal inArg){ inObj->setParticleMass( inArg ); }
PxReal getPxParticleBase_ParticleMass( const PxParticleBase* inObj ) { return inObj->getParticleMass(); }
void setPxParticleBase_Restitution( PxParticleBase* inObj, PxReal inArg){ inObj->setRestitution( inArg ); }
PxReal getPxParticleBase_Restitution( const PxParticleBase* inObj ) { return inObj->getRestitution(); }
void setPxParticleBase_DynamicFriction( PxParticleBase* inObj, PxReal inArg){ inObj->setDynamicFriction( inArg ); }
PxReal getPxParticleBase_DynamicFriction( const PxParticleBase* inObj ) { return inObj->getDynamicFriction(); }
void setPxParticleBase_StaticFriction( PxParticleBase* inObj, PxReal inArg){ inObj->setStaticFriction( inArg ); }
PxReal getPxParticleBase_StaticFriction( const PxParticleBase* inObj ) { return inObj->getStaticFriction(); }
void setPxParticleBase_SimulationFilterData( PxParticleBase* inObj, const PxFilterData & inArg){ inObj->setSimulationFilterData( inArg ); }
PxFilterData getPxParticleBase_SimulationFilterData( const PxParticleBase* inObj ) { return inObj->getSimulationFilterData(); }
PxParticleBaseFlags getPxParticleBase_ParticleBaseFlags( const PxParticleBase* inObj ) { return inObj->getParticleBaseFlags(); }
PxU32 getPxParticleBase_MaxParticles( const PxParticleBase* inObj ) { return inObj->getMaxParticles(); }
PxReal getPxParticleBase_MaxMotionDistance( const PxParticleBase* inObj ) { return inObj->getMaxMotionDistance(); }
PxReal getPxParticleBase_RestOffset( const PxParticleBase* inObj ) { return inObj->getRestOffset(); }
PxReal getPxParticleBase_ContactOffset( const PxParticleBase* inObj ) { return inObj->getContactOffset(); }
PxReal getPxParticleBase_GridSize( const PxParticleBase* inObj ) { return inObj->getGridSize(); }
PxParticleReadDataFlags getPxParticleBase_ParticleReadDataFlags( const PxParticleBase* inObj ) { return inObj->getParticleReadDataFlags(); }
const PxParticleBase * getPxParticleBase_IsParticleBase( const PxParticleBase* inObj ) { return inObj->isParticleBase(); }
PX_PHYSX_CORE_API PxParticleBaseGeneratedInfo::PxParticleBaseGeneratedInfo()
	: Damping( "Damping", setPxParticleBase_Damping, getPxParticleBase_Damping)
	, ExternalAcceleration( "ExternalAcceleration", setPxParticleBase_ExternalAcceleration, getPxParticleBase_ExternalAcceleration)
	, ParticleMass( "ParticleMass", setPxParticleBase_ParticleMass, getPxParticleBase_ParticleMass)
	, Restitution( "Restitution", setPxParticleBase_Restitution, getPxParticleBase_Restitution)
	, DynamicFriction( "DynamicFriction", setPxParticleBase_DynamicFriction, getPxParticleBase_DynamicFriction)
	, StaticFriction( "StaticFriction", setPxParticleBase_StaticFriction, getPxParticleBase_StaticFriction)
	, SimulationFilterData( "SimulationFilterData", setPxParticleBase_SimulationFilterData, getPxParticleBase_SimulationFilterData)
	, ParticleBaseFlags( "ParticleBaseFlags", getPxParticleBase_ParticleBaseFlags)
	, MaxParticles( "MaxParticles", getPxParticleBase_MaxParticles)
	, MaxMotionDistance( "MaxMotionDistance", getPxParticleBase_MaxMotionDistance)
	, RestOffset( "RestOffset", getPxParticleBase_RestOffset)
	, ContactOffset( "ContactOffset", getPxParticleBase_ContactOffset)
	, GridSize( "GridSize", getPxParticleBase_GridSize)
	, ParticleReadDataFlags( "ParticleReadDataFlags", getPxParticleBase_ParticleReadDataFlags)
	, IsParticleBase( "IsParticleBase", getPxParticleBase_IsParticleBase)
{}
PX_PHYSX_CORE_API PxParticleBaseGeneratedValues::PxParticleBaseGeneratedValues( const PxParticleBase* inSource )
		:PxActorGeneratedValues( inSource )
		,Damping( getPxParticleBase_Damping( inSource ) )
		,ExternalAcceleration( getPxParticleBase_ExternalAcceleration( inSource ) )
		,ParticleMass( getPxParticleBase_ParticleMass( inSource ) )
		,Restitution( getPxParticleBase_Restitution( inSource ) )
		,DynamicFriction( getPxParticleBase_DynamicFriction( inSource ) )
		,StaticFriction( getPxParticleBase_StaticFriction( inSource ) )
		,SimulationFilterData( getPxParticleBase_SimulationFilterData( inSource ) )
		,ParticleBaseFlags( getPxParticleBase_ParticleBaseFlags( inSource ) )
		,MaxParticles( getPxParticleBase_MaxParticles( inSource ) )
		,MaxMotionDistance( getPxParticleBase_MaxMotionDistance( inSource ) )
		,RestOffset( getPxParticleBase_RestOffset( inSource ) )
		,ContactOffset( getPxParticleBase_ContactOffset( inSource ) )
		,GridSize( getPxParticleBase_GridSize( inSource ) )
		,ParticleReadDataFlags( getPxParticleBase_ParticleReadDataFlags( inSource ) )
		,IsParticleBase( getPxParticleBase_IsParticleBase( inSource ) )
{
	inSource->getProjectionPlane( ProjectionPlane.normal, ProjectionPlane.distance );
}
PX_PHYSX_CORE_API PxParticleSystemGeneratedInfo::PxParticleSystemGeneratedInfo()
{}
PX_PHYSX_CORE_API PxParticleSystemGeneratedValues::PxParticleSystemGeneratedValues( const PxParticleSystem* inSource )
		:PxParticleBaseGeneratedValues( inSource )
{
}
void setPxParticleFluid_Stiffness( PxParticleFluid* inObj, PxReal inArg){ inObj->setStiffness( inArg ); }
PxReal getPxParticleFluid_Stiffness( const PxParticleFluid* inObj ) { return inObj->getStiffness(); }
void setPxParticleFluid_Viscosity( PxParticleFluid* inObj, PxReal inArg){ inObj->setViscosity( inArg ); }
PxReal getPxParticleFluid_Viscosity( const PxParticleFluid* inObj ) { return inObj->getViscosity(); }
PxReal getPxParticleFluid_RestParticleDistance( const PxParticleFluid* inObj ) { return inObj->getRestParticleDistance(); }
PX_PHYSX_CORE_API PxParticleFluidGeneratedInfo::PxParticleFluidGeneratedInfo()
	: Stiffness( "Stiffness", setPxParticleFluid_Stiffness, getPxParticleFluid_Stiffness)
	, Viscosity( "Viscosity", setPxParticleFluid_Viscosity, getPxParticleFluid_Viscosity)
	, RestParticleDistance( "RestParticleDistance", getPxParticleFluid_RestParticleDistance)
{}
PX_PHYSX_CORE_API PxParticleFluidGeneratedValues::PxParticleFluidGeneratedValues( const PxParticleFluid* inSource )
		:PxParticleBaseGeneratedValues( inSource )
		,Stiffness( getPxParticleFluid_Stiffness( inSource ) )
		,Viscosity( getPxParticleFluid_Viscosity( inSource ) )
		,RestParticleDistance( getPxParticleFluid_RestParticleDistance( inSource ) )
{
}
PxDeformableMesh * getPxDeformable_DeformableMesh( const PxDeformable* inObj ) { return inObj->getDeformableMesh(); }
void setPxDeformable_BendingStiffness( PxDeformable* inObj, PxReal inArg){ inObj->setBendingStiffness( inArg ); }
PxReal getPxDeformable_BendingStiffness( const PxDeformable* inObj ) { return inObj->getBendingStiffness(); }
void setPxDeformable_VolumeStiffness( PxDeformable* inObj, PxReal inArg){ inObj->setVolumeStiffness( inArg ); }
PxReal getPxDeformable_VolumeStiffness( const PxDeformable* inObj ) { return inObj->getVolumeStiffness(); }
void setPxDeformable_StretchingStiffness( PxDeformable* inObj, PxReal inArg){ inObj->setStretchingStiffness( inArg ); }
PxReal getPxDeformable_StretchingStiffness( const PxDeformable* inObj ) { return inObj->getStretchingStiffness(); }
void setPxDeformable_DampingCoefficient( PxDeformable* inObj, PxReal inArg){ inObj->setDampingCoefficient( inArg ); }
PxReal getPxDeformable_DampingCoefficient( const PxDeformable* inObj ) { return inObj->getDampingCoefficient(); }
void setPxDeformable_StaticFriction( PxDeformable* inObj, PxReal inArg){ inObj->setStaticFriction( inArg ); }
PxReal getPxDeformable_StaticFriction( const PxDeformable* inObj ) { return inObj->getStaticFriction(); }
void setPxDeformable_DynamicFriction( PxDeformable* inObj, PxReal inArg){ inObj->setDynamicFriction( inArg ); }
PxReal getPxDeformable_DynamicFriction( const PxDeformable* inObj ) { return inObj->getDynamicFriction(); }
void setPxDeformable_Pressure( PxDeformable* inObj, PxReal inArg){ inObj->setPressure( inArg ); }
PxReal getPxDeformable_Pressure( const PxDeformable* inObj ) { return inObj->getPressure(); }
void setPxDeformable_TearFactor( PxDeformable* inObj, PxReal inArg){ inObj->setTearFactor( inArg ); }
PxReal getPxDeformable_TearFactor( const PxDeformable* inObj ) { return inObj->getTearFactor(); }
void setPxDeformable_AttachmentTearFactor( PxDeformable* inObj, PxReal inArg){ inObj->setAttachmentTearFactor( inArg ); }
PxReal getPxDeformable_AttachmentTearFactor( const PxDeformable* inObj ) { return inObj->getAttachmentTearFactor(); }
PxReal getPxDeformable_Mass( const PxDeformable* inObj ) { return inObj->getMass(); }
PxReal getPxDeformable_RelativeGridSpacing( const PxDeformable* inObj ) { return inObj->getRelativeGridSpacing(); }
void setPxDeformable_SolverIterations( PxDeformable* inObj, PxU32 inArg){ inObj->setSolverIterations( inArg ); }
PxU32 getPxDeformable_SolverIterations( const PxDeformable* inObj ) { return inObj->getSolverIterations(); }
void setPxDeformable_HierarchicalSolverIterations( PxDeformable* inObj, PxU32 inArg){ inObj->setHierarchicalSolverIterations( inArg ); }
PxU32 getPxDeformable_HierarchicalSolverIterations( const PxDeformable* inObj ) { return inObj->getHierarchicalSolverIterations(); }
PxBounds3 getPxDeformable_WorldBounds( const PxDeformable* inObj ) { return inObj->getWorldBounds(); }
void setPxDeformable_ValidBounds( PxDeformable* inObj, const PxBounds3 & inArg){ inObj->setValidBounds( inArg ); }
PxBounds3 getPxDeformable_ValidBounds( const PxDeformable* inObj ) { return inObj->getValidBounds(); }
void setPxDeformable_ConstrainPositions( PxDeformable* inObj, const PxStrideIterator<const PxVec3> & inArg){ inObj->setConstrainPositions( inArg ); }
void setPxDeformable_ConstrainNormals( PxDeformable* inObj, const PxStrideIterator<const PxVec3> & inArg){ inObj->setConstrainNormals( inArg ); }
void setPxDeformable_ConstrainCoefficients( PxDeformable* inObj, const PxStrideIterator<const PxDeformableConstrainCoefficients> & inArg){ inObj->setConstrainCoefficients( inArg ); }
PxU32 getPxDeformable_NumVertices( const PxDeformable* inObj ) { return inObj->getNumVertices(); }
PxU32 getPxDeformable_MaxVertices( const PxDeformable* inObj ) { return inObj->getMaxVertices(); }
void setPxDeformable_CollisionStiffness( PxDeformable* inObj, PxReal inArg){ inObj->setCollisionStiffness( inArg ); }
PxReal getPxDeformable_CollisionStiffness( const PxDeformable* inObj ) { return inObj->getCollisionStiffness(); }
void setPxDeformable_AttachmentStiffness( PxDeformable* inObj, PxReal inArg){ inObj->setAttachmentStiffness( inArg ); }
PxReal getPxDeformable_AttachmentStiffness( const PxDeformable* inObj ) { return inObj->getAttachmentStiffness(); }
void setPxDeformable_ContactOffset( PxDeformable* inObj, PxReal inArg){ inObj->setContactOffset( inArg ); }
PxReal getPxDeformable_ContactOffset( const PxDeformable* inObj ) { return inObj->getContactOffset(); }
void setPxDeformable_RestOffset( PxDeformable* inObj, PxReal inArg){ inObj->setRestOffset( inArg ); }
PxReal getPxDeformable_RestOffset( const PxDeformable* inObj ) { return inObj->getRestOffset(); }
void setPxDeformable_PenetrationOffset( PxDeformable* inObj, PxReal inArg){ inObj->setPenetrationOffset( inArg ); }
PxReal getPxDeformable_PenetrationOffset( const PxDeformable* inObj ) { return inObj->getPenetrationOffset(); }
void setPxDeformable_SelfCollisionOffset( PxDeformable* inObj, PxReal inArg){ inObj->setSelfCollisionOffset( inArg ); }
PxReal getPxDeformable_SelfCollisionOffset( const PxDeformable* inObj ) { return inObj->getSelfCollisionOffset(); }
void setPxDeformable_ExternalAcceleration( PxDeformable* inObj, PxVec3 inArg){ inObj->setExternalAcceleration( inArg ); }
PxVec3 getPxDeformable_ExternalAcceleration( const PxDeformable* inObj ) { return inObj->getExternalAcceleration(); }
void setPxDeformable_WindAcceleration( PxDeformable* inObj, PxVec3 inArg){ inObj->setWindAcceleration( inArg ); }
PxVec3 getPxDeformable_WindAcceleration( const PxDeformable* inObj ) { return inObj->getWindAcceleration(); }
_Bool getPxDeformable_IsSleeping( const PxDeformable* inObj ) { return inObj->isSleeping(); }
void setPxDeformable_SleepLinearVelocity( PxDeformable* inObj, PxReal inArg){ inObj->setSleepLinearVelocity( inArg ); }
PxReal getPxDeformable_SleepLinearVelocity( const PxDeformable* inObj ) { return inObj->getSleepLinearVelocity(); }
void setPxDeformable_SimulationFilterData( PxDeformable* inObj, const PxFilterData & inArg){ inObj->setSimulationFilterData( inArg ); }
PxFilterData getPxDeformable_SimulationFilterData( const PxDeformable* inObj ) { return inObj->getSimulationFilterData(); }
PxU32 getPxDeformable_DeformableFlags( const PxDeformable* inObj ) { return inObj->getDeformableFlags(); }
PxU32 getPxDeformable_DeformableReadDataFlags( const PxDeformable* inObj ) { return inObj->getDeformableReadDataFlags(); }
PX_PHYSX_CORE_API PxDeformableGeneratedInfo::PxDeformableGeneratedInfo()
	: DeformableMesh( "DeformableMesh", getPxDeformable_DeformableMesh)
	, BendingStiffness( "BendingStiffness", setPxDeformable_BendingStiffness, getPxDeformable_BendingStiffness)
	, VolumeStiffness( "VolumeStiffness", setPxDeformable_VolumeStiffness, getPxDeformable_VolumeStiffness)
	, StretchingStiffness( "StretchingStiffness", setPxDeformable_StretchingStiffness, getPxDeformable_StretchingStiffness)
	, DampingCoefficient( "DampingCoefficient", setPxDeformable_DampingCoefficient, getPxDeformable_DampingCoefficient)
	, StaticFriction( "StaticFriction", setPxDeformable_StaticFriction, getPxDeformable_StaticFriction)
	, DynamicFriction( "DynamicFriction", setPxDeformable_DynamicFriction, getPxDeformable_DynamicFriction)
	, Pressure( "Pressure", setPxDeformable_Pressure, getPxDeformable_Pressure)
	, TearFactor( "TearFactor", setPxDeformable_TearFactor, getPxDeformable_TearFactor)
	, AttachmentTearFactor( "AttachmentTearFactor", setPxDeformable_AttachmentTearFactor, getPxDeformable_AttachmentTearFactor)
	, Mass( "Mass", getPxDeformable_Mass)
	, RelativeGridSpacing( "RelativeGridSpacing", getPxDeformable_RelativeGridSpacing)
	, SolverIterations( "SolverIterations", setPxDeformable_SolverIterations, getPxDeformable_SolverIterations)
	, HierarchicalSolverIterations( "HierarchicalSolverIterations", setPxDeformable_HierarchicalSolverIterations, getPxDeformable_HierarchicalSolverIterations)
	, WorldBounds( "WorldBounds", getPxDeformable_WorldBounds)
	, ValidBounds( "ValidBounds", setPxDeformable_ValidBounds, getPxDeformable_ValidBounds)
	, ConstrainPositions( "ConstrainPositions", setPxDeformable_ConstrainPositions)
	, ConstrainNormals( "ConstrainNormals", setPxDeformable_ConstrainNormals)
	, ConstrainCoefficients( "ConstrainCoefficients", setPxDeformable_ConstrainCoefficients)
	, NumVertices( "NumVertices", getPxDeformable_NumVertices)
	, MaxVertices( "MaxVertices", getPxDeformable_MaxVertices)
	, CollisionStiffness( "CollisionStiffness", setPxDeformable_CollisionStiffness, getPxDeformable_CollisionStiffness)
	, AttachmentStiffness( "AttachmentStiffness", setPxDeformable_AttachmentStiffness, getPxDeformable_AttachmentStiffness)
	, ContactOffset( "ContactOffset", setPxDeformable_ContactOffset, getPxDeformable_ContactOffset)
	, RestOffset( "RestOffset", setPxDeformable_RestOffset, getPxDeformable_RestOffset)
	, PenetrationOffset( "PenetrationOffset", setPxDeformable_PenetrationOffset, getPxDeformable_PenetrationOffset)
	, SelfCollisionOffset( "SelfCollisionOffset", setPxDeformable_SelfCollisionOffset, getPxDeformable_SelfCollisionOffset)
	, ExternalAcceleration( "ExternalAcceleration", setPxDeformable_ExternalAcceleration, getPxDeformable_ExternalAcceleration)
	, WindAcceleration( "WindAcceleration", setPxDeformable_WindAcceleration, getPxDeformable_WindAcceleration)
	, IsSleeping( "IsSleeping", getPxDeformable_IsSleeping)
	, SleepLinearVelocity( "SleepLinearVelocity", setPxDeformable_SleepLinearVelocity, getPxDeformable_SleepLinearVelocity)
	, SimulationFilterData( "SimulationFilterData", setPxDeformable_SimulationFilterData, getPxDeformable_SimulationFilterData)
	, DeformableFlags( "DeformableFlags", getPxDeformable_DeformableFlags)
	, DeformableReadDataFlags( "DeformableReadDataFlags", getPxDeformable_DeformableReadDataFlags)
{}
PX_PHYSX_CORE_API PxDeformableGeneratedValues::PxDeformableGeneratedValues( const PxDeformable* inSource )
		:PxActorGeneratedValues( inSource )
		,DeformableMesh( getPxDeformable_DeformableMesh( inSource ) )
		,BendingStiffness( getPxDeformable_BendingStiffness( inSource ) )
		,VolumeStiffness( getPxDeformable_VolumeStiffness( inSource ) )
		,StretchingStiffness( getPxDeformable_StretchingStiffness( inSource ) )
		,DampingCoefficient( getPxDeformable_DampingCoefficient( inSource ) )
		,StaticFriction( getPxDeformable_StaticFriction( inSource ) )
		,DynamicFriction( getPxDeformable_DynamicFriction( inSource ) )
		,Pressure( getPxDeformable_Pressure( inSource ) )
		,TearFactor( getPxDeformable_TearFactor( inSource ) )
		,AttachmentTearFactor( getPxDeformable_AttachmentTearFactor( inSource ) )
		,Mass( getPxDeformable_Mass( inSource ) )
		,RelativeGridSpacing( getPxDeformable_RelativeGridSpacing( inSource ) )
		,SolverIterations( getPxDeformable_SolverIterations( inSource ) )
		,HierarchicalSolverIterations( getPxDeformable_HierarchicalSolverIterations( inSource ) )
		,WorldBounds( getPxDeformable_WorldBounds( inSource ) )
		,ValidBounds( getPxDeformable_ValidBounds( inSource ) )
		,NumVertices( getPxDeformable_NumVertices( inSource ) )
		,MaxVertices( getPxDeformable_MaxVertices( inSource ) )
		,CollisionStiffness( getPxDeformable_CollisionStiffness( inSource ) )
		,AttachmentStiffness( getPxDeformable_AttachmentStiffness( inSource ) )
		,ContactOffset( getPxDeformable_ContactOffset( inSource ) )
		,RestOffset( getPxDeformable_RestOffset( inSource ) )
		,PenetrationOffset( getPxDeformable_PenetrationOffset( inSource ) )
		,SelfCollisionOffset( getPxDeformable_SelfCollisionOffset( inSource ) )
		,ExternalAcceleration( getPxDeformable_ExternalAcceleration( inSource ) )
		,WindAcceleration( getPxDeformable_WindAcceleration( inSource ) )
		,IsSleeping( getPxDeformable_IsSleeping( inSource ) )
		,SleepLinearVelocity( getPxDeformable_SleepLinearVelocity( inSource ) )
		,SimulationFilterData( getPxDeformable_SimulationFilterData( inSource ) )
		,DeformableFlags( getPxDeformable_DeformableFlags( inSource ) )
		,DeformableReadDataFlags( getPxDeformable_DeformableReadDataFlags( inSource ) )
{
}
PxU32 getPxClothFabric_Phases( const PxClothFabric* inObj, PxU32* outBuffer, PxU32 inBufSize ) { return inObj->getPhases( outBuffer, inBufSize ); }
PxU32 getNbPxClothFabric_Phases( const PxClothFabric* inObj ) { return inObj->getNbPhases(  ); }
PxU32 getPxClothFabric_Fibers( const PxClothFabric* inObj, PxU32* outBuffer, PxU32 inBufSize ) { return inObj->getFibers( outBuffer, inBufSize ); }
PxU32 getNbPxClothFabric_Fibers( const PxClothFabric* inObj ) { return inObj->getNbFibers(  ); }
PxU32 getPxClothFabric_ParticleIndices( const PxClothFabric* inObj, PxU32* outBuffer, PxU32 inBufSize ) { return inObj->getParticleIndices( outBuffer, inBufSize ); }
PxU32 getNbPxClothFabric_ParticleIndices( const PxClothFabric* inObj ) { return inObj->getNbParticleIndices(  ); }
PxU32 getPxClothFabric_ReferenceCount( const PxClothFabric* inObj ) { return inObj->getReferenceCount(); }
PX_PHYSX_CORE_API PxClothFabricGeneratedInfo::PxClothFabricGeneratedInfo()
	: Phases( "Phases", getPxClothFabric_Phases, getNbPxClothFabric_Phases )
	, Fibers( "Fibers", getPxClothFabric_Fibers, getNbPxClothFabric_Fibers )
	, ParticleIndices( "ParticleIndices", getPxClothFabric_ParticleIndices, getNbPxClothFabric_ParticleIndices )
	, ReferenceCount( "ReferenceCount", getPxClothFabric_ReferenceCount)
{}
PX_PHYSX_CORE_API PxClothFabricGeneratedValues::PxClothFabricGeneratedValues( const PxClothFabric* inSource )
		:ReferenceCount( getPxClothFabric_ReferenceCount( inSource ) )
{
}
PxClothFabric * getPxCloth_Fabric( const PxCloth* inObj ) { return inObj->getFabric(); }
void setPxCloth_Particles( PxCloth* inObj, const PxClothParticle * inArg){ inObj->setParticles( inArg ); }
void setPxCloth_MotionConstraintScaleBias( PxCloth* inObj, PxReal inArg0, PxReal inArg1 ) { inObj->setMotionConstraintScaleBias( inArg0, inArg1 ); }
void getPxCloth_MotionConstraintScaleBias( const PxCloth* inObj, PxReal& inArg0, PxReal& inArg1 ) { inObj->getMotionConstraintScaleBias( inArg0, inArg1 ); }
void setPxCloth_CollisionSpheres( PxCloth* inObj, const PxClothCollisionSphere * inArg){ inObj->setCollisionSpheres( inArg ); }
void setPxCloth_GlobalPose( PxCloth* inObj, const PxTransform & inArg){ inObj->setGlobalPose( inArg ); }
PxTransform getPxCloth_GlobalPose( const PxCloth* inObj ) { return inObj->getGlobalPose(); }
void setPxCloth_TargetPose( PxCloth* inObj, const PxTransform & inArg){ inObj->setTargetPose( inArg ); }
void setPxCloth_ExternalAcceleration( PxCloth* inObj, PxVec3 inArg){ inObj->setExternalAcceleration( inArg ); }
PxVec3 getPxCloth_ExternalAcceleration( const PxCloth* inObj ) { return inObj->getExternalAcceleration(); }
void setPxCloth_DampingCoefficient( PxCloth* inObj, PxReal inArg){ inObj->setDampingCoefficient( inArg ); }
PxReal getPxCloth_DampingCoefficient( const PxCloth* inObj ) { return inObj->getDampingCoefficient(); }
void setPxCloth_SolverFrequency( PxCloth* inObj, PxReal inArg){ inObj->setSolverFrequency( inArg ); }
PxReal getPxCloth_SolverFrequency( const PxCloth* inObj ) { return inObj->getSolverFrequency(); }
PxClothFlags getPxCloth_ClothFlags( const PxCloth* inObj ) { return inObj->getClothFlags(); }
_Bool getPxCloth_IsSleeping( const PxCloth* inObj ) { return inObj->isSleeping(); }
void setPxCloth_SleepLinearVelocity( PxCloth* inObj, PxReal inArg){ inObj->setSleepLinearVelocity( inArg ); }
PxReal getPxCloth_SleepLinearVelocity( const PxCloth* inObj ) { return inObj->getSleepLinearVelocity(); }
PxReal getPxCloth_PreviousTimeStep( const PxCloth* inObj ) { return inObj->getPreviousTimeStep(); }
PxBounds3 getPxCloth_WorldBounds( const PxCloth* inObj ) { return inObj->getWorldBounds(); }
PX_PHYSX_CORE_API PxClothGeneratedInfo::PxClothGeneratedInfo()
	: Fabric( "Fabric", getPxCloth_Fabric)
	, Particles( "Particles", setPxCloth_Particles)
	, MotionConstraintScaleBias( "MotionConstraintScaleBias", "scale", "bias", setPxCloth_MotionConstraintScaleBias, getPxCloth_MotionConstraintScaleBias)
	, CollisionSpheres( "CollisionSpheres", setPxCloth_CollisionSpheres)
	, GlobalPose( "GlobalPose", setPxCloth_GlobalPose, getPxCloth_GlobalPose)
	, TargetPose( "TargetPose", setPxCloth_TargetPose)
	, ExternalAcceleration( "ExternalAcceleration", setPxCloth_ExternalAcceleration, getPxCloth_ExternalAcceleration)
	, DampingCoefficient( "DampingCoefficient", setPxCloth_DampingCoefficient, getPxCloth_DampingCoefficient)
	, SolverFrequency( "SolverFrequency", setPxCloth_SolverFrequency, getPxCloth_SolverFrequency)
	, ClothFlags( "ClothFlags", getPxCloth_ClothFlags)
	, IsSleeping( "IsSleeping", getPxCloth_IsSleeping)
	, SleepLinearVelocity( "SleepLinearVelocity", setPxCloth_SleepLinearVelocity, getPxCloth_SleepLinearVelocity)
	, PreviousTimeStep( "PreviousTimeStep", getPxCloth_PreviousTimeStep)
	, WorldBounds( "WorldBounds", getPxCloth_WorldBounds)
{}
PX_PHYSX_CORE_API PxClothGeneratedValues::PxClothGeneratedValues( const PxCloth* inSource )
		:PxActorGeneratedValues( inSource )
		,Fabric( getPxCloth_Fabric( inSource ) )
		,GlobalPose( getPxCloth_GlobalPose( inSource ) )
		,ExternalAcceleration( getPxCloth_ExternalAcceleration( inSource ) )
		,DampingCoefficient( getPxCloth_DampingCoefficient( inSource ) )
		,SolverFrequency( getPxCloth_SolverFrequency( inSource ) )
		,ClothFlags( getPxCloth_ClothFlags( inSource ) )
		,IsSleeping( getPxCloth_IsSleeping( inSource ) )
		,SleepLinearVelocity( getPxCloth_SleepLinearVelocity( inSource ) )
		,PreviousTimeStep( getPxCloth_PreviousTimeStep( inSource ) )
		,WorldBounds( getPxCloth_WorldBounds( inSource ) )
{
	getPxCloth_MotionConstraintScaleBias( inSource, MotionConstraintScaleBias[0], MotionConstraintScaleBias[1] );
}
PX_PHYSX_CORE_API PxLockedDataGeneratedInfo::PxLockedDataGeneratedInfo()
{}
PX_PHYSX_CORE_API PxLockedDataGeneratedValues::PxLockedDataGeneratedValues( const PxLockedData* inSource )
{
}
inline const PxClothParticle * getPxClothReadDataParticles( const PxClothReadData* inOwner ) { return inOwner->particles; }
inline void setPxClothReadDataParticles( PxClothReadData* inOwner, const PxClothParticle * inData) { inOwner->particles = inData; }
inline const PxClothParticle * getPxClothReadDataPreviousParticles( const PxClothReadData* inOwner ) { return inOwner->previousParticles; }
inline void setPxClothReadDataPreviousParticles( PxClothReadData* inOwner, const PxClothParticle * inData) { inOwner->previousParticles = inData; }
PX_PHYSX_CORE_API PxClothReadDataGeneratedInfo::PxClothReadDataGeneratedInfo()
	: Particles( "Particles", setPxClothReadDataParticles, getPxClothReadDataParticles )
	, PreviousParticles( "PreviousParticles", setPxClothReadDataPreviousParticles, getPxClothReadDataPreviousParticles )
{}
PX_PHYSX_CORE_API PxClothReadDataGeneratedValues::PxClothReadDataGeneratedValues( const PxClothReadData* inSource )
		:PxLockedDataGeneratedValues( inSource )
		,Particles( inSource->particles )
		,PreviousParticles( inSource->previousParticles )
{
}
PxU32 getPxMaterial_ReferenceCount( const PxMaterial* inObj ) { return inObj->getReferenceCount(); }
void setPxMaterial_DynamicFriction( PxMaterial* inObj, PxReal inArg){ inObj->setDynamicFriction( inArg ); }
PxReal getPxMaterial_DynamicFriction( const PxMaterial* inObj ) { return inObj->getDynamicFriction(); }
void setPxMaterial_StaticFriction( PxMaterial* inObj, PxReal inArg){ inObj->setStaticFriction( inArg ); }
PxReal getPxMaterial_StaticFriction( const PxMaterial* inObj ) { return inObj->getStaticFriction(); }
void setPxMaterial_Restitution( PxMaterial* inObj, PxReal inArg){ inObj->setRestitution( inArg ); }
PxReal getPxMaterial_Restitution( const PxMaterial* inObj ) { return inObj->getRestitution(); }
void setPxMaterial_DynamicFrictionV( PxMaterial* inObj, PxReal inArg){ inObj->setDynamicFrictionV( inArg ); }
PxReal getPxMaterial_DynamicFrictionV( const PxMaterial* inObj ) { return inObj->getDynamicFrictionV(); }
void setPxMaterial_StaticFrictionV( PxMaterial* inObj, PxReal inArg){ inObj->setStaticFrictionV( inArg ); }
PxReal getPxMaterial_StaticFrictionV( const PxMaterial* inObj ) { return inObj->getStaticFrictionV(); }
void setPxMaterial_DirOfAnisotropy( PxMaterial* inObj, const PxVec3 & inArg){ inObj->setDirOfAnisotropy( inArg ); }
PxVec3 getPxMaterial_DirOfAnisotropy( const PxMaterial* inObj ) { return inObj->getDirOfAnisotropy(); }
void setPxMaterial_Flags( PxMaterial* inObj, PxMaterialFlags inArg){ inObj->setFlags( inArg ); }
PxMaterialFlags getPxMaterial_Flags( const PxMaterial* inObj ) { return inObj->getFlags(); }
void setPxMaterial_FrictionCombineMode( PxMaterial* inObj, PxCombineMode::Enum inArg){ inObj->setFrictionCombineMode( inArg ); }
PxCombineMode::Enum getPxMaterial_FrictionCombineMode( const PxMaterial* inObj ) { return inObj->getFrictionCombineMode(); }
void setPxMaterial_RestitutionCombineMode( PxMaterial* inObj, PxCombineMode::Enum inArg){ inObj->setRestitutionCombineMode( inArg ); }
PxCombineMode::Enum getPxMaterial_RestitutionCombineMode( const PxMaterial* inObj ) { return inObj->getRestitutionCombineMode(); }
inline void * getPxMaterialUserData( const PxMaterial* inOwner ) { return inOwner->userData; }
inline void setPxMaterialUserData( PxMaterial* inOwner, void * inData) { inOwner->userData = inData; }
PX_PHYSX_CORE_API PxMaterialGeneratedInfo::PxMaterialGeneratedInfo()
	: ReferenceCount( "ReferenceCount", getPxMaterial_ReferenceCount)
	, DynamicFriction( "DynamicFriction", setPxMaterial_DynamicFriction, getPxMaterial_DynamicFriction)
	, StaticFriction( "StaticFriction", setPxMaterial_StaticFriction, getPxMaterial_StaticFriction)
	, Restitution( "Restitution", setPxMaterial_Restitution, getPxMaterial_Restitution)
	, DynamicFrictionV( "DynamicFrictionV", setPxMaterial_DynamicFrictionV, getPxMaterial_DynamicFrictionV)
	, StaticFrictionV( "StaticFrictionV", setPxMaterial_StaticFrictionV, getPxMaterial_StaticFrictionV)
	, DirOfAnisotropy( "DirOfAnisotropy", setPxMaterial_DirOfAnisotropy, getPxMaterial_DirOfAnisotropy)
	, Flags( "Flags", setPxMaterial_Flags, getPxMaterial_Flags)
	, FrictionCombineMode( "FrictionCombineMode", setPxMaterial_FrictionCombineMode, getPxMaterial_FrictionCombineMode)
	, RestitutionCombineMode( "RestitutionCombineMode", setPxMaterial_RestitutionCombineMode, getPxMaterial_RestitutionCombineMode)
	, UserData( "UserData", setPxMaterialUserData, getPxMaterialUserData )
{}
PX_PHYSX_CORE_API PxMaterialGeneratedValues::PxMaterialGeneratedValues( const PxMaterial* inSource )
		:ReferenceCount( getPxMaterial_ReferenceCount( inSource ) )
		,DynamicFriction( getPxMaterial_DynamicFriction( inSource ) )
		,StaticFriction( getPxMaterial_StaticFriction( inSource ) )
		,Restitution( getPxMaterial_Restitution( inSource ) )
		,DynamicFrictionV( getPxMaterial_DynamicFrictionV( inSource ) )
		,StaticFrictionV( getPxMaterial_StaticFrictionV( inSource ) )
		,DirOfAnisotropy( getPxMaterial_DirOfAnisotropy( inSource ) )
		,Flags( getPxMaterial_Flags( inSource ) )
		,FrictionCombineMode( getPxMaterial_FrictionCombineMode( inSource ) )
		,RestitutionCombineMode( getPxMaterial_RestitutionCombineMode( inSource ) )
		,UserData( inSource->userData )
{
}
PxSceneFlags getPxScene_Flags( const PxScene* inObj ) { return inObj->getFlags(); }
void setPxScene_Gravity( PxScene* inObj, const PxVec3 & inArg){ inObj->setGravity( inArg ); }
PxVec3 getPxScene_Gravity( const PxScene* inObj ) { return inObj->getGravity(); }
PxU32 getPxScene_Aggregates( const PxScene* inObj, PxAggregate ** outBuffer, PxU32 inBufSize ) { return inObj->getAggregates( outBuffer, inBufSize ); }
PxU32 getNbPxScene_Aggregates( const PxScene* inObj ) { return inObj->getNbAggregates(  ); }
void addPxScene_Aggregates( PxScene* inObj, PxAggregate *& inParam ){ return inObj->addAggregate( *inParam ); }
void removePxScene_Aggregates( PxScene* inObj, PxAggregate *& inParam ){ return inObj->removeAggregate( *inParam ); }
PxU32 getPxScene_Actors( const PxScene* inObj, PxActorTypeSelectionFlags inFilter, PxActor ** outBuffer, PxU32 inBufSize ) { return inObj->getActors( inFilter, outBuffer, inBufSize ); }
PxU32 getNbPxScene_Actors( const PxScene* inObj, PxActorTypeSelectionFlags inFilter ) { return inObj->getNbActors( inFilter ); }
void addPxScene_Actors( PxScene* inObj, PxActor *& inParam ){ return inObj->addActor( *inParam ); }
void removePxScene_Actors( PxScene* inObj, PxActor *& inParam ){ return inObj->removeActor( *inParam ); }
PxU32 getPxScene_Articulations( const PxScene* inObj, PxArticulation ** outBuffer, PxU32 inBufSize ) { return inObj->getArticulations( outBuffer, inBufSize ); }
PxU32 getNbPxScene_Articulations( const PxScene* inObj ) { return inObj->getNbArticulations(  ); }
void addPxScene_Articulations( PxScene* inObj, PxArticulation *& inParam ){ return inObj->addArticulation( *inParam ); }
void removePxScene_Articulations( PxScene* inObj, PxArticulation *& inParam ){ return inObj->removeArticulation( *inParam ); }
PxU32 getPxScene_Constraints( const PxScene* inObj, PxConstraint ** outBuffer, PxU32 inBufSize ) { return inObj->getConstraints( outBuffer, inBufSize ); }
PxU32 getNbPxScene_Constraints( const PxScene* inObj ) { return inObj->getNbConstraints(  ); }
PxU32 getPxScene_Attachments( const PxScene* inObj, PxAttachment ** outBuffer, PxU32 inBufSize ) { return inObj->getAttachments( outBuffer, inBufSize ); }
PxU32 getNbPxScene_Attachments( const PxScene* inObj ) { return inObj->getNbAttachments(  ); }
void setPxScene_ClientBehaviorBits( PxScene* inObj, PxClientID inIndex, PxU32 inArg ){ inObj->setClientBehaviorBits( inIndex, inArg ); }
PxU32 getPxScene_ClientBehaviorBits( const PxScene* inObj, PxClientID inIndex ) { return inObj->getClientBehaviorBits( inIndex ); }
void setPxScene_ContactModifyCallback( PxScene* inObj, PxContactModifyCallback * inArg){ inObj->setContactModifyCallback( inArg ); }
PxContactModifyCallback * getPxScene_ContactModifyCallback( const PxScene* inObj ) { return inObj->getContactModifyCallback(); }
const void * getPxScene_FilterShaderData( const PxScene* inObj ) { return inObj->getFilterShaderData(); }
PxU32 getPxScene_FilterShaderDataSize( const PxScene* inObj ) { return inObj->getFilterShaderDataSize(); }
PxSimulationFilterShader getPxScene_FilterShader( const PxScene* inObj ) { return inObj->getFilterShader(); }
PxSimulationFilterCallback * getPxScene_FilterCallback( const PxScene* inObj ) { return inObj->getFilterCallback(); }
void setPxScene_DynamicTreeRebuildRateHint( PxScene* inObj, PxU32 inArg){ inObj->setDynamicTreeRebuildRateHint( inArg ); }
PxU32 getPxScene_DynamicTreeRebuildRateHint( const PxScene* inObj ) { return inObj->getDynamicTreeRebuildRateHint(); }
void setPxScene_SolverBatchSize( PxScene* inObj, PxU32 inArg){ inObj->setSolverBatchSize( inArg ); }
PxU32 getPxScene_SolverBatchSize( const PxScene* inObj ) { return inObj->getSolverBatchSize(); }
void setPxScene_VisualizationCullingBox( PxScene* inObj, const PxBounds3 & inArg){ inObj->setVisualizationCullingBox( inArg ); }
const PxBounds3 & getPxScene_VisualizationCullingBox( const PxScene* inObj ) { return inObj->getVisualizationCullingBox(); }
physx::pxtask::TaskManager * getPxScene_TaskManager( const PxScene* inObj ) { return inObj->getTaskManager(); }
inline void * getPxSceneUserData( const PxScene* inOwner ) { return inOwner->userData; }
inline void setPxSceneUserData( PxScene* inOwner, void * inData) { inOwner->userData = inData; }
PX_PHYSX_CORE_API PxSceneGeneratedInfo::PxSceneGeneratedInfo()
	: Flags( "Flags", getPxScene_Flags)
	, Gravity( "Gravity", setPxScene_Gravity, getPxScene_Gravity)
	, Aggregates( "Aggregates", getPxScene_Aggregates, getNbPxScene_Aggregates, addPxScene_Aggregates, removePxScene_Aggregates )
	, Actors( "Actors", getPxScene_Actors, getNbPxScene_Actors, addPxScene_Actors, removePxScene_Actors )
	, Articulations( "Articulations", getPxScene_Articulations, getNbPxScene_Articulations, addPxScene_Articulations, removePxScene_Articulations )
	, Constraints( "Constraints", getPxScene_Constraints, getNbPxScene_Constraints )
	, Attachments( "Attachments", getPxScene_Attachments, getNbPxScene_Attachments )
	, ClientBehaviorBits( "ClientBehaviorBits", setPxScene_ClientBehaviorBits, getPxScene_ClientBehaviorBits)
	, ContactModifyCallback( "ContactModifyCallback", setPxScene_ContactModifyCallback, getPxScene_ContactModifyCallback)
	, FilterShaderData( "FilterShaderData", getPxScene_FilterShaderData)
	, FilterShaderDataSize( "FilterShaderDataSize", getPxScene_FilterShaderDataSize)
	, FilterShader( "FilterShader", getPxScene_FilterShader)
	, FilterCallback( "FilterCallback", getPxScene_FilterCallback)
	, DynamicTreeRebuildRateHint( "DynamicTreeRebuildRateHint", setPxScene_DynamicTreeRebuildRateHint, getPxScene_DynamicTreeRebuildRateHint)
	, SolverBatchSize( "SolverBatchSize", setPxScene_SolverBatchSize, getPxScene_SolverBatchSize)
	, VisualizationCullingBox( "VisualizationCullingBox", setPxScene_VisualizationCullingBox, getPxScene_VisualizationCullingBox)
	, TaskManager( "TaskManager", getPxScene_TaskManager)
	, UserData( "UserData", setPxSceneUserData, getPxSceneUserData )
{}
PX_PHYSX_CORE_API PxSceneGeneratedValues::PxSceneGeneratedValues( const PxScene* inSource )
		:Flags( getPxScene_Flags( inSource ) )
		,Gravity( getPxScene_Gravity( inSource ) )
		,ContactModifyCallback( getPxScene_ContactModifyCallback( inSource ) )
		,FilterShaderData( getPxScene_FilterShaderData( inSource ) )
		,FilterShaderDataSize( getPxScene_FilterShaderDataSize( inSource ) )
		,FilterShader( getPxScene_FilterShader( inSource ) )
		,FilterCallback( getPxScene_FilterCallback( inSource ) )
		,DynamicTreeRebuildRateHint( getPxScene_DynamicTreeRebuildRateHint( inSource ) )
		,SolverBatchSize( getPxScene_SolverBatchSize( inSource ) )
		,VisualizationCullingBox( getPxScene_VisualizationCullingBox( inSource ) )
		,TaskManager( getPxScene_TaskManager( inSource ) )
		,UserData( inSource->userData )
{
	inSource->getSimulationStatistics(SimulationStatistics);
}
void setPxSceneDesc_ToDefault( PxSceneDesc* inObj, const PxTolerancesScale & inArg){ inObj->setToDefault( inArg ); }
_Bool getPxSceneDesc_IsValid( const PxSceneDesc* inObj ) { return inObj->isValid(); }
inline PxVec3 getPxSceneDescGravity( const PxSceneDesc* inOwner ) { return inOwner->gravity; }
inline void setPxSceneDescGravity( PxSceneDesc* inOwner, PxVec3 inData) { inOwner->gravity = inData; }
inline PxSimulationEventCallback * getPxSceneDescSimulationEventCallback( const PxSceneDesc* inOwner ) { return inOwner->simulationEventCallback; }
inline void setPxSceneDescSimulationEventCallback( PxSceneDesc* inOwner, PxSimulationEventCallback * inData) { inOwner->simulationEventCallback = inData; }
inline PxContactModifyCallback * getPxSceneDescContactModifyCallback( const PxSceneDesc* inOwner ) { return inOwner->contactModifyCallback; }
inline void setPxSceneDescContactModifyCallback( PxSceneDesc* inOwner, PxContactModifyCallback * inData) { inOwner->contactModifyCallback = inData; }
inline const void * getPxSceneDescFilterShaderData( const PxSceneDesc* inOwner ) { return inOwner->filterShaderData; }
inline void setPxSceneDescFilterShaderData( PxSceneDesc* inOwner, const void * inData) { inOwner->filterShaderData = inData; }
inline PxU32 getPxSceneDescFilterShaderDataSize( const PxSceneDesc* inOwner ) { return inOwner->filterShaderDataSize; }
inline void setPxSceneDescFilterShaderDataSize( PxSceneDesc* inOwner, PxU32 inData) { inOwner->filterShaderDataSize = inData; }
inline PxSimulationFilterShader getPxSceneDescFilterShader( const PxSceneDesc* inOwner ) { return inOwner->filterShader; }
inline void setPxSceneDescFilterShader( PxSceneDesc* inOwner, PxSimulationFilterShader inData) { inOwner->filterShader = inData; }
inline PxSimulationFilterCallback * getPxSceneDescFilterCallback( const PxSceneDesc* inOwner ) { return inOwner->filterCallback; }
inline void setPxSceneDescFilterCallback( PxSceneDesc* inOwner, PxSimulationFilterCallback * inData) { inOwner->filterCallback = inData; }
inline PxBounds3 getPxSceneDescMaxBounds( const PxSceneDesc* inOwner ) { return inOwner->maxBounds; }
inline void setPxSceneDescMaxBounds( PxSceneDesc* inOwner, PxBounds3 inData) { inOwner->maxBounds = inData; }
inline PxSceneLimits getPxSceneDescLimits( const PxSceneDesc* inOwner ) { return inOwner->limits; }
inline void setPxSceneDescLimits( PxSceneDesc* inOwner, PxSceneLimits inData) { inOwner->limits = inData; }
inline PxReal getPxSceneDescSweepEpsilonDistance( const PxSceneDesc* inOwner ) { return inOwner->sweepEpsilonDistance; }
inline void setPxSceneDescSweepEpsilonDistance( PxSceneDesc* inOwner, PxReal inData) { inOwner->sweepEpsilonDistance = inData; }
inline PxReal getPxSceneDescContactCorrelationDistance( const PxSceneDesc* inOwner ) { return inOwner->contactCorrelationDistance; }
inline void setPxSceneDescContactCorrelationDistance( PxSceneDesc* inOwner, PxReal inData) { inOwner->contactCorrelationDistance = inData; }
inline PxReal getPxSceneDescBounceThresholdVelocity( const PxSceneDesc* inOwner ) { return inOwner->bounceThresholdVelocity; }
inline void setPxSceneDescBounceThresholdVelocity( PxSceneDesc* inOwner, PxReal inData) { inOwner->bounceThresholdVelocity = inData; }
inline PxSceneFlags getPxSceneDescFlags( const PxSceneDesc* inOwner ) { return inOwner->flags; }
inline void setPxSceneDescFlags( PxSceneDesc* inOwner, PxSceneFlags inData) { inOwner->flags = inData; }
inline pxtask::CpuDispatcher * getPxSceneDescCpuDispatcher( const PxSceneDesc* inOwner ) { return inOwner->cpuDispatcher; }
inline void setPxSceneDescCpuDispatcher( PxSceneDesc* inOwner, pxtask::CpuDispatcher * inData) { inOwner->cpuDispatcher = inData; }
inline pxtask::GpuDispatcher * getPxSceneDescGpuDispatcher( const PxSceneDesc* inOwner ) { return inOwner->gpuDispatcher; }
inline void setPxSceneDescGpuDispatcher( PxSceneDesc* inOwner, pxtask::GpuDispatcher * inData) { inOwner->gpuDispatcher = inData; }
inline pxtask::SpuDispatcher * getPxSceneDescSpuDispatcher( const PxSceneDesc* inOwner ) { return inOwner->spuDispatcher; }
inline void setPxSceneDescSpuDispatcher( PxSceneDesc* inOwner, pxtask::SpuDispatcher * inData) { inOwner->spuDispatcher = inData; }
inline PxU32 getPxSceneDescUpAxis( const PxSceneDesc* inOwner ) { return inOwner->upAxis; }
inline void setPxSceneDescUpAxis( PxSceneDesc* inOwner, PxU32 inData) { inOwner->upAxis = inData; }
inline PxU32 getPxSceneDescSubdivisionLevel( const PxSceneDesc* inOwner ) { return inOwner->subdivisionLevel; }
inline void setPxSceneDescSubdivisionLevel( PxSceneDesc* inOwner, PxU32 inData) { inOwner->subdivisionLevel = inData; }
inline PxPruningStructure::Enum getPxSceneDescStaticStructure( const PxSceneDesc* inOwner ) { return inOwner->staticStructure; }
inline void setPxSceneDescStaticStructure( PxSceneDesc* inOwner, PxPruningStructure::Enum inData) { inOwner->staticStructure = inData; }
inline PxPruningStructure::Enum getPxSceneDescDynamicStructure( const PxSceneDesc* inOwner ) { return inOwner->dynamicStructure; }
inline void setPxSceneDescDynamicStructure( PxSceneDesc* inOwner, PxPruningStructure::Enum inData) { inOwner->dynamicStructure = inData; }
inline PxU32 getPxSceneDescDynamicTreeRebuildRateHint( const PxSceneDesc* inOwner ) { return inOwner->dynamicTreeRebuildRateHint; }
inline void setPxSceneDescDynamicTreeRebuildRateHint( PxSceneDesc* inOwner, PxU32 inData) { inOwner->dynamicTreeRebuildRateHint = inData; }
inline void * getPxSceneDescUserData( const PxSceneDesc* inOwner ) { return inOwner->userData; }
inline void setPxSceneDescUserData( PxSceneDesc* inOwner, void * inData) { inOwner->userData = inData; }
inline PxU32 getPxSceneDescSolverBatchSize( const PxSceneDesc* inOwner ) { return inOwner->solverBatchSize; }
inline void setPxSceneDescSolverBatchSize( PxSceneDesc* inOwner, PxU32 inData) { inOwner->solverBatchSize = inData; }
inline PxReal getPxSceneDescSweptIntegrationLinearSpeedFactor( const PxSceneDesc* inOwner ) { return inOwner->sweptIntegrationLinearSpeedFactor; }
inline void setPxSceneDescSweptIntegrationLinearSpeedFactor( PxSceneDesc* inOwner, PxReal inData) { inOwner->sweptIntegrationLinearSpeedFactor = inData; }
inline PxReal getPxSceneDescSweptIntegrationAngularSpeedFactor( const PxSceneDesc* inOwner ) { return inOwner->sweptIntegrationAngularSpeedFactor; }
inline void setPxSceneDescSweptIntegrationAngularSpeedFactor( PxSceneDesc* inOwner, PxReal inData) { inOwner->sweptIntegrationAngularSpeedFactor = inData; }
inline PxU32 getPxSceneDescNum16KContactDataBlocks( const PxSceneDesc* inOwner ) { return inOwner->num16KContactDataBlocks; }
inline void setPxSceneDescNum16KContactDataBlocks( PxSceneDesc* inOwner, PxU32 inData) { inOwner->num16KContactDataBlocks = inData; }
PX_PHYSX_CORE_API PxSceneDescGeneratedInfo::PxSceneDescGeneratedInfo()
	: ToDefault( "ToDefault", setPxSceneDesc_ToDefault)
	, IsValid( "IsValid", getPxSceneDesc_IsValid)
	, Gravity( "Gravity", setPxSceneDescGravity, getPxSceneDescGravity )
	, SimulationEventCallback( "SimulationEventCallback", setPxSceneDescSimulationEventCallback, getPxSceneDescSimulationEventCallback )
	, ContactModifyCallback( "ContactModifyCallback", setPxSceneDescContactModifyCallback, getPxSceneDescContactModifyCallback )
	, FilterShaderData( "FilterShaderData", setPxSceneDescFilterShaderData, getPxSceneDescFilterShaderData )
	, FilterShaderDataSize( "FilterShaderDataSize", setPxSceneDescFilterShaderDataSize, getPxSceneDescFilterShaderDataSize )
	, FilterShader( "FilterShader", setPxSceneDescFilterShader, getPxSceneDescFilterShader )
	, FilterCallback( "FilterCallback", setPxSceneDescFilterCallback, getPxSceneDescFilterCallback )
	, MaxBounds( "MaxBounds", setPxSceneDescMaxBounds, getPxSceneDescMaxBounds )
	, Limits( "Limits", setPxSceneDescLimits, getPxSceneDescLimits )
	, SweepEpsilonDistance( "SweepEpsilonDistance", setPxSceneDescSweepEpsilonDistance, getPxSceneDescSweepEpsilonDistance )
	, ContactCorrelationDistance( "ContactCorrelationDistance", setPxSceneDescContactCorrelationDistance, getPxSceneDescContactCorrelationDistance )
	, BounceThresholdVelocity( "BounceThresholdVelocity", setPxSceneDescBounceThresholdVelocity, getPxSceneDescBounceThresholdVelocity )
	, Flags( "Flags", setPxSceneDescFlags, getPxSceneDescFlags )
	, CpuDispatcher( "CpuDispatcher", setPxSceneDescCpuDispatcher, getPxSceneDescCpuDispatcher )
	, GpuDispatcher( "GpuDispatcher", setPxSceneDescGpuDispatcher, getPxSceneDescGpuDispatcher )
	, SpuDispatcher( "SpuDispatcher", setPxSceneDescSpuDispatcher, getPxSceneDescSpuDispatcher )
	, UpAxis( "UpAxis", setPxSceneDescUpAxis, getPxSceneDescUpAxis )
	, SubdivisionLevel( "SubdivisionLevel", setPxSceneDescSubdivisionLevel, getPxSceneDescSubdivisionLevel )
	, StaticStructure( "StaticStructure", setPxSceneDescStaticStructure, getPxSceneDescStaticStructure )
	, DynamicStructure( "DynamicStructure", setPxSceneDescDynamicStructure, getPxSceneDescDynamicStructure )
	, DynamicTreeRebuildRateHint( "DynamicTreeRebuildRateHint", setPxSceneDescDynamicTreeRebuildRateHint, getPxSceneDescDynamicTreeRebuildRateHint )
	, UserData( "UserData", setPxSceneDescUserData, getPxSceneDescUserData )
	, SolverBatchSize( "SolverBatchSize", setPxSceneDescSolverBatchSize, getPxSceneDescSolverBatchSize )
	, SweptIntegrationLinearSpeedFactor( "SweptIntegrationLinearSpeedFactor", setPxSceneDescSweptIntegrationLinearSpeedFactor, getPxSceneDescSweptIntegrationLinearSpeedFactor )
	, SweptIntegrationAngularSpeedFactor( "SweptIntegrationAngularSpeedFactor", setPxSceneDescSweptIntegrationAngularSpeedFactor, getPxSceneDescSweptIntegrationAngularSpeedFactor )
	, Num16KContactDataBlocks( "Num16KContactDataBlocks", setPxSceneDescNum16KContactDataBlocks, getPxSceneDescNum16KContactDataBlocks )
{}
PX_PHYSX_CORE_API PxSceneDescGeneratedValues::PxSceneDescGeneratedValues( const PxSceneDesc* inSource )
		:IsValid( getPxSceneDesc_IsValid( inSource ) )
		,Gravity( inSource->gravity )
		,SimulationEventCallback( inSource->simulationEventCallback )
		,ContactModifyCallback( inSource->contactModifyCallback )
		,FilterShaderData( inSource->filterShaderData )
		,FilterShaderDataSize( inSource->filterShaderDataSize )
		,FilterShader( inSource->filterShader )
		,FilterCallback( inSource->filterCallback )
		,MaxBounds( inSource->maxBounds )
		,Limits( inSource->limits )
		,SweepEpsilonDistance( inSource->sweepEpsilonDistance )
		,ContactCorrelationDistance( inSource->contactCorrelationDistance )
		,BounceThresholdVelocity( inSource->bounceThresholdVelocity )
		,Flags( inSource->flags )
		,CpuDispatcher( inSource->cpuDispatcher )
		,GpuDispatcher( inSource->gpuDispatcher )
		,SpuDispatcher( inSource->spuDispatcher )
		,UpAxis( inSource->upAxis )
		,SubdivisionLevel( inSource->subdivisionLevel )
		,StaticStructure( inSource->staticStructure )
		,DynamicStructure( inSource->dynamicStructure )
		,DynamicTreeRebuildRateHint( inSource->dynamicTreeRebuildRateHint )
		,UserData( inSource->userData )
		,SolverBatchSize( inSource->solverBatchSize )
		,SweptIntegrationLinearSpeedFactor( inSource->sweptIntegrationLinearSpeedFactor )
		,SweptIntegrationAngularSpeedFactor( inSource->sweptIntegrationAngularSpeedFactor )
		,Num16KContactDataBlocks( inSource->num16KContactDataBlocks )
{
}
_Bool getPxTolerancesScale_IsValid( const PxTolerancesScale* inObj ) { return inObj->isValid(); }
inline PxReal getPxTolerancesScaleLength( const PxTolerancesScale* inOwner ) { return inOwner->length; }
inline void setPxTolerancesScaleLength( PxTolerancesScale* inOwner, PxReal inData) { inOwner->length = inData; }
inline PxReal getPxTolerancesScaleMass( const PxTolerancesScale* inOwner ) { return inOwner->mass; }
inline void setPxTolerancesScaleMass( PxTolerancesScale* inOwner, PxReal inData) { inOwner->mass = inData; }
inline PxReal getPxTolerancesScaleSpeed( const PxTolerancesScale* inOwner ) { return inOwner->speed; }
inline void setPxTolerancesScaleSpeed( PxTolerancesScale* inOwner, PxReal inData) { inOwner->speed = inData; }
PX_PHYSX_CORE_API PxTolerancesScaleGeneratedInfo::PxTolerancesScaleGeneratedInfo()
	: IsValid( "IsValid", getPxTolerancesScale_IsValid)
	, Length( "Length", setPxTolerancesScaleLength, getPxTolerancesScaleLength )
	, Mass( "Mass", setPxTolerancesScaleMass, getPxTolerancesScaleMass )
	, Speed( "Speed", setPxTolerancesScaleSpeed, getPxTolerancesScaleSpeed )
{}
PX_PHYSX_CORE_API PxTolerancesScaleGeneratedValues::PxTolerancesScaleGeneratedValues( const PxTolerancesScale* inSource )
		:IsValid( getPxTolerancesScale_IsValid( inSource ) )
		,Length( inSource->length )
		,Mass( inSource->mass )
		,Speed( inSource->speed )
{
}
inline PxVec3 getPxClothParticlePos( const PxClothParticle* inOwner ) { return inOwner->pos; }
inline void setPxClothParticlePos( PxClothParticle* inOwner, PxVec3 inData) { inOwner->pos = inData; }
inline PxReal getPxClothParticleInvWeight( const PxClothParticle* inOwner ) { return inOwner->invWeight; }
inline void setPxClothParticleInvWeight( PxClothParticle* inOwner, PxReal inData) { inOwner->invWeight = inData; }
PX_PHYSX_CORE_API PxClothParticleGeneratedInfo::PxClothParticleGeneratedInfo()
	: Pos( "Pos", setPxClothParticlePos, getPxClothParticlePos )
	, InvWeight( "InvWeight", setPxClothParticleInvWeight, getPxClothParticleInvWeight )
{}
PX_PHYSX_CORE_API PxClothParticleGeneratedValues::PxClothParticleGeneratedValues( const PxClothParticle* inSource )
		:Pos( inSource->pos )
		,InvWeight( inSource->invWeight )
{
}
PxGeometryType::Enum getPxGeometry_Type( const PxGeometry* inObj ) { return inObj->getType(); }
PX_PHYSX_CORE_API PxGeometryGeneratedInfo::PxGeometryGeneratedInfo()
	: Type( "Type", getPxGeometry_Type)
{}
PX_PHYSX_CORE_API PxGeometryGeneratedValues::PxGeometryGeneratedValues( const PxGeometry* inSource )
		:Type( getPxGeometry_Type( inSource ) )
{
}
PxU32 getPxPhysics_Scenes( const PxPhysics* inObj, PxScene ** outBuffer, PxU32 inBufSize ) { return inObj->getScenes( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_Scenes( const PxPhysics* inObj ) { return inObj->getNbScenes(  ); }
PxScene * createPxPhysics_Scenes( PxPhysics* inObj, const PxSceneDesc & inCreateParam ){ return inObj->createScene( inCreateParam ); }
PxU32 getPxPhysics_Materials( const PxPhysics* inObj, PxMaterial ** outBuffer, PxU32 inBufSize ) { return inObj->getMaterials( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_Materials( const PxPhysics* inObj ) { return inObj->getNbMaterials(  ); }
PxU32 getPxPhysics_TriangleMeshes( const PxPhysics* inObj, PxTriangleMesh ** outBuffer, PxU32 inBufSize ) { return inObj->getTriangleMeshes( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_TriangleMeshes( const PxPhysics* inObj ) { return inObj->getNbTriangleMeshes(  ); }
PxTriangleMesh * createPxPhysics_TriangleMeshes( PxPhysics* inObj, const PxStream & inCreateParam ){ return inObj->createTriangleMesh( inCreateParam ); }
PxU32 getPxPhysics_HeightFields( const PxPhysics* inObj, PxHeightField ** outBuffer, PxU32 inBufSize ) { return inObj->getHeightFields( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_HeightFields( const PxPhysics* inObj ) { return inObj->getNbHeightFields(  ); }
PxHeightField * createPxPhysics_HeightFields( PxPhysics* inObj, const PxHeightFieldDesc & inCreateParam ){ return inObj->createHeightField( inCreateParam ); }
PxU32 getPxPhysics_ConvexMeshes( const PxPhysics* inObj, PxConvexMesh ** outBuffer, PxU32 inBufSize ) { return inObj->getConvexMeshes( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_ConvexMeshes( const PxPhysics* inObj ) { return inObj->getNbConvexMeshes(  ); }
PxConvexMesh * createPxPhysics_ConvexMeshes( PxPhysics* inObj, const PxStream & inCreateParam ){ return inObj->createConvexMesh( inCreateParam ); }
PxU32 getPxPhysics_DeformableMeshes( const PxPhysics* inObj, PxDeformableMesh ** outBuffer, PxU32 inBufSize ) { return inObj->getDeformableMeshes( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_DeformableMeshes( const PxPhysics* inObj ) { return inObj->getNbDeformableMeshes(  ); }
PxDeformableMesh * createPxPhysics_DeformableMeshes( PxPhysics* inObj, const PxStream & inCreateParam ){ return inObj->createDeformableMesh( inCreateParam ); }
PxU32 getPxPhysics_ClothFabrics( const PxPhysics* inObj, PxClothFabric ** outBuffer, PxU32 inBufSize ) { return inObj->getClothFabrics( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_ClothFabrics( const PxPhysics* inObj ) { return inObj->getNbClothFabrics(  ); }
const PxTolerancesScale & getPxPhysics_TolerancesScale( const PxPhysics* inObj ) { return inObj->getTolerancesScale(); }
PX_PHYSX_CORE_API PxPhysicsGeneratedInfo::PxPhysicsGeneratedInfo()
	: Scenes( "Scenes", getPxPhysics_Scenes, getNbPxPhysics_Scenes, createPxPhysics_Scenes )
	, Materials( "Materials", getPxPhysics_Materials, getNbPxPhysics_Materials )
	, TriangleMeshes( "TriangleMeshes", getPxPhysics_TriangleMeshes, getNbPxPhysics_TriangleMeshes, createPxPhysics_TriangleMeshes )
	, HeightFields( "HeightFields", getPxPhysics_HeightFields, getNbPxPhysics_HeightFields, createPxPhysics_HeightFields )
	, ConvexMeshes( "ConvexMeshes", getPxPhysics_ConvexMeshes, getNbPxPhysics_ConvexMeshes, createPxPhysics_ConvexMeshes )
	, DeformableMeshes( "DeformableMeshes", getPxPhysics_DeformableMeshes, getNbPxPhysics_DeformableMeshes, createPxPhysics_DeformableMeshes )
	, ClothFabrics( "ClothFabrics", getPxPhysics_ClothFabrics, getNbPxPhysics_ClothFabrics )
	, TolerancesScale( "TolerancesScale", getPxPhysics_TolerancesScale)
{}
PX_PHYSX_CORE_API PxPhysicsGeneratedValues::PxPhysicsGeneratedValues( const PxPhysics* inSource )
		:TolerancesScale( getPxPhysics_TolerancesScale( inSource ) )
{
}
_Bool getPxSceneLimits_IsValid( const PxSceneLimits* inObj ) { return inObj->isValid(); }
inline PxU32 getPxSceneLimitsMaxNbActors( const PxSceneLimits* inOwner ) { return inOwner->maxNbActors; }
inline void setPxSceneLimitsMaxNbActors( PxSceneLimits* inOwner, PxU32 inData) { inOwner->maxNbActors = inData; }
inline PxU32 getPxSceneLimitsMaxNbBodies( const PxSceneLimits* inOwner ) { return inOwner->maxNbBodies; }
inline void setPxSceneLimitsMaxNbBodies( PxSceneLimits* inOwner, PxU32 inData) { inOwner->maxNbBodies = inData; }
inline PxU32 getPxSceneLimitsMaxNbStaticShapes( const PxSceneLimits* inOwner ) { return inOwner->maxNbStaticShapes; }
inline void setPxSceneLimitsMaxNbStaticShapes( PxSceneLimits* inOwner, PxU32 inData) { inOwner->maxNbStaticShapes = inData; }
inline PxU32 getPxSceneLimitsMaxNbDynamicShapes( const PxSceneLimits* inOwner ) { return inOwner->maxNbDynamicShapes; }
inline void setPxSceneLimitsMaxNbDynamicShapes( PxSceneLimits* inOwner, PxU32 inData) { inOwner->maxNbDynamicShapes = inData; }
inline PxU32 getPxSceneLimitsMaxNbConstraints( const PxSceneLimits* inOwner ) { return inOwner->maxNbConstraints; }
inline void setPxSceneLimitsMaxNbConstraints( PxSceneLimits* inOwner, PxU32 inData) { inOwner->maxNbConstraints = inData; }
PX_PHYSX_CORE_API PxSceneLimitsGeneratedInfo::PxSceneLimitsGeneratedInfo()
	: IsValid( "IsValid", getPxSceneLimits_IsValid)
	, MaxNbActors( "MaxNbActors", setPxSceneLimitsMaxNbActors, getPxSceneLimitsMaxNbActors )
	, MaxNbBodies( "MaxNbBodies", setPxSceneLimitsMaxNbBodies, getPxSceneLimitsMaxNbBodies )
	, MaxNbStaticShapes( "MaxNbStaticShapes", setPxSceneLimitsMaxNbStaticShapes, getPxSceneLimitsMaxNbStaticShapes )
	, MaxNbDynamicShapes( "MaxNbDynamicShapes", setPxSceneLimitsMaxNbDynamicShapes, getPxSceneLimitsMaxNbDynamicShapes )
	, MaxNbConstraints( "MaxNbConstraints", setPxSceneLimitsMaxNbConstraints, getPxSceneLimitsMaxNbConstraints )
{}
PX_PHYSX_CORE_API PxSceneLimitsGeneratedValues::PxSceneLimitsGeneratedValues( const PxSceneLimits* inSource )
		:IsValid( getPxSceneLimits_IsValid( inSource ) )
		,MaxNbActors( inSource->maxNbActors )
		,MaxNbBodies( inSource->maxNbBodies )
		,MaxNbStaticShapes( inSource->maxNbStaticShapes )
		,MaxNbDynamicShapes( inSource->maxNbDynamicShapes )
		,MaxNbConstraints( inSource->maxNbConstraints )
{
}
inline PxU32 getPxSimulationStatisticsNumActiveConstraints( const PxSimulationStatistics* inOwner ) { return inOwner->numActiveConstraints; }
inline void setPxSimulationStatisticsNumActiveConstraints( PxSimulationStatistics* inOwner, PxU32 inData) { inOwner->numActiveConstraints = inData; }
inline PxU32 getPxSimulationStatisticsNumActiveDynamicBodies( const PxSimulationStatistics* inOwner ) { return inOwner->numActiveDynamicBodies; }
inline void setPxSimulationStatisticsNumActiveDynamicBodies( PxSimulationStatistics* inOwner, PxU32 inData) { inOwner->numActiveDynamicBodies = inData; }
inline PxU32 getPxSimulationStatisticsNumActiveKinematicBodies( const PxSimulationStatistics* inOwner ) { return inOwner->numActiveKinematicBodies; }
inline void setPxSimulationStatisticsNumActiveKinematicBodies( PxSimulationStatistics* inOwner, PxU32 inData) { inOwner->numActiveKinematicBodies = inData; }
inline PxU32 getPxSimulationStatisticsNumStaticBodies( const PxSimulationStatistics* inOwner ) { return inOwner->numStaticBodies; }
inline void setPxSimulationStatisticsNumStaticBodies( PxSimulationStatistics* inOwner, PxU32 inData) { inOwner->numStaticBodies = inData; }
inline PxU32 getPxSimulationStatisticsNumDynamicBodies( const PxSimulationStatistics* inOwner ) { return inOwner->numDynamicBodies; }
inline void setPxSimulationStatisticsNumDynamicBodies( PxSimulationStatistics* inOwner, PxU32 inData) { inOwner->numDynamicBodies = inData; }
inline PxU32 getPxSimulationStatisticsNumAxisSolverConstraints( const PxSimulationStatistics* inOwner ) { return inOwner->numAxisSolverConstraints; }
inline void setPxSimulationStatisticsNumAxisSolverConstraints( PxSimulationStatistics* inOwner, PxU32 inData) { inOwner->numAxisSolverConstraints = inData; }
PX_PHYSX_CORE_API PxSimulationStatisticsGeneratedInfo::PxSimulationStatisticsGeneratedInfo()
	: NumActiveConstraints( "NumActiveConstraints", setPxSimulationStatisticsNumActiveConstraints, getPxSimulationStatisticsNumActiveConstraints )
	, NumActiveDynamicBodies( "NumActiveDynamicBodies", setPxSimulationStatisticsNumActiveDynamicBodies, getPxSimulationStatisticsNumActiveDynamicBodies )
	, NumActiveKinematicBodies( "NumActiveKinematicBodies", setPxSimulationStatisticsNumActiveKinematicBodies, getPxSimulationStatisticsNumActiveKinematicBodies )
	, NumStaticBodies( "NumStaticBodies", setPxSimulationStatisticsNumStaticBodies, getPxSimulationStatisticsNumStaticBodies )
	, NumDynamicBodies( "NumDynamicBodies", setPxSimulationStatisticsNumDynamicBodies, getPxSimulationStatisticsNumDynamicBodies )
	, NumAxisSolverConstraints( "NumAxisSolverConstraints", setPxSimulationStatisticsNumAxisSolverConstraints, getPxSimulationStatisticsNumAxisSolverConstraints )
{}
PX_PHYSX_CORE_API PxSimulationStatisticsGeneratedValues::PxSimulationStatisticsGeneratedValues( const PxSimulationStatistics* inSource )
		:NumActiveConstraints( inSource->numActiveConstraints )
		,NumActiveDynamicBodies( inSource->numActiveDynamicBodies )
		,NumActiveKinematicBodies( inSource->numActiveKinematicBodies )
		,NumStaticBodies( inSource->numStaticBodies )
		,NumDynamicBodies( inSource->numDynamicBodies )
		,NumAxisSolverConstraints( inSource->numAxisSolverConstraints )
{
	physx::shdfnd::memCopy( NumDiscreteContactPairs, inSource->numDiscreteContactPairs, sizeof( NumDiscreteContactPairs ) );
	physx::shdfnd::memCopy( NumModifiedContactPairs, inSource->numModifiedContactPairs, sizeof( NumModifiedContactPairs ) );
	physx::shdfnd::memCopy( NumSweptContactPairs, inSource->numSweptContactPairs, sizeof( NumSweptContactPairs ) );
	physx::shdfnd::memCopy( NumSweptIntegrationPairs, inSource->numSweptIntegrationPairs, sizeof( NumSweptIntegrationPairs ) );
	physx::shdfnd::memCopy( NumTriggerPairs, inSource->numTriggerPairs, sizeof( NumTriggerPairs ) );
	physx::shdfnd::memCopy( NumBroadPhaseAdds, inSource->numBroadPhaseAdds, sizeof( NumBroadPhaseAdds ) );
	physx::shdfnd::memCopy( NumBroadPhaseRemoves, inSource->numBroadPhaseRemoves, sizeof( NumBroadPhaseRemoves ) );
	physx::shdfnd::memCopy( NumShapes, inSource->numShapes, sizeof( NumShapes ) );
}
inline PxU32 getPxParticleReadDataNumValidParticles( const PxParticleReadData* inOwner ) { return inOwner->numValidParticles; }
inline void setPxParticleReadDataNumValidParticles( PxParticleReadData* inOwner, PxU32 inData) { inOwner->numValidParticles = inData; }
inline PxU32 getPxParticleReadDataValidParticleRange( const PxParticleReadData* inOwner ) { return inOwner->validParticleRange; }
inline void setPxParticleReadDataValidParticleRange( PxParticleReadData* inOwner, PxU32 inData) { inOwner->validParticleRange = inData; }
inline const PxU32 * getPxParticleReadDataValidParticleBitmap( const PxParticleReadData* inOwner ) { return inOwner->validParticleBitmap; }
inline void setPxParticleReadDataValidParticleBitmap( PxParticleReadData* inOwner, const PxU32 * inData) { inOwner->validParticleBitmap = inData; }
inline PxStrideIterator<const PxVec3> getPxParticleReadDataPositionBuffer( const PxParticleReadData* inOwner ) { return inOwner->positionBuffer; }
inline void setPxParticleReadDataPositionBuffer( PxParticleReadData* inOwner, PxStrideIterator<const PxVec3> inData) { inOwner->positionBuffer = inData; }
inline PxStrideIterator<const PxVec3> getPxParticleReadDataVelocityBuffer( const PxParticleReadData* inOwner ) { return inOwner->velocityBuffer; }
inline void setPxParticleReadDataVelocityBuffer( PxParticleReadData* inOwner, PxStrideIterator<const PxVec3> inData) { inOwner->velocityBuffer = inData; }
inline PxStrideIterator<const PxF32> getPxParticleReadDataRestOffsetBuffer( const PxParticleReadData* inOwner ) { return inOwner->restOffsetBuffer; }
inline void setPxParticleReadDataRestOffsetBuffer( PxParticleReadData* inOwner, PxStrideIterator<const PxF32> inData) { inOwner->restOffsetBuffer = inData; }
inline PxStrideIterator<const PxParticleFlags> getPxParticleReadDataFlagsBuffer( const PxParticleReadData* inOwner ) { return inOwner->flagsBuffer; }
inline void setPxParticleReadDataFlagsBuffer( PxParticleReadData* inOwner, PxStrideIterator<const PxParticleFlags> inData) { inOwner->flagsBuffer = inData; }
inline PxStrideIterator<const PxVec3> getPxParticleReadDataCollisionNormalBuffer( const PxParticleReadData* inOwner ) { return inOwner->collisionNormalBuffer; }
inline void setPxParticleReadDataCollisionNormalBuffer( PxParticleReadData* inOwner, PxStrideIterator<const PxVec3> inData) { inOwner->collisionNormalBuffer = inData; }
PX_PHYSX_CORE_API PxParticleReadDataGeneratedInfo::PxParticleReadDataGeneratedInfo()
	: NumValidParticles( "NumValidParticles", setPxParticleReadDataNumValidParticles, getPxParticleReadDataNumValidParticles )
	, ValidParticleRange( "ValidParticleRange", setPxParticleReadDataValidParticleRange, getPxParticleReadDataValidParticleRange )
	, ValidParticleBitmap( "ValidParticleBitmap", setPxParticleReadDataValidParticleBitmap, getPxParticleReadDataValidParticleBitmap )
	, PositionBuffer( "PositionBuffer", setPxParticleReadDataPositionBuffer, getPxParticleReadDataPositionBuffer )
	, VelocityBuffer( "VelocityBuffer", setPxParticleReadDataVelocityBuffer, getPxParticleReadDataVelocityBuffer )
	, RestOffsetBuffer( "RestOffsetBuffer", setPxParticleReadDataRestOffsetBuffer, getPxParticleReadDataRestOffsetBuffer )
	, FlagsBuffer( "FlagsBuffer", setPxParticleReadDataFlagsBuffer, getPxParticleReadDataFlagsBuffer )
	, CollisionNormalBuffer( "CollisionNormalBuffer", setPxParticleReadDataCollisionNormalBuffer, getPxParticleReadDataCollisionNormalBuffer )
{}
PX_PHYSX_CORE_API PxParticleReadDataGeneratedValues::PxParticleReadDataGeneratedValues( const PxParticleReadData* inSource )
		:PxLockedDataGeneratedValues( inSource )
		,NumValidParticles( inSource->numValidParticles )
		,ValidParticleRange( inSource->validParticleRange )
		,ValidParticleBitmap( inSource->validParticleBitmap )
		,PositionBuffer( inSource->positionBuffer )
		,VelocityBuffer( inSource->velocityBuffer )
		,RestOffsetBuffer( inSource->restOffsetBuffer )
		,FlagsBuffer( inSource->flagsBuffer )
		,CollisionNormalBuffer( inSource->collisionNormalBuffer )
{
}
PxArticulationJoint * getPxArticulationLink_InboundJoint( const PxArticulationLink* inObj ) { return inObj->getInboundJoint(); }
PxU32 getPxArticulationLink_Children( const PxArticulationLink* inObj, PxArticulationLink ** outBuffer, PxU32 inBufSize ) { return inObj->getChildren( outBuffer, inBufSize ); }
PxU32 getNbPxArticulationLink_Children( const PxArticulationLink* inObj ) { return inObj->getNbChildren(  ); }
PX_PHYSX_CORE_API PxArticulationLinkGeneratedInfo::PxArticulationLinkGeneratedInfo()
	: InboundJoint( "InboundJoint", getPxArticulationLink_InboundJoint)
	, Children( "Children", getPxArticulationLink_Children, getNbPxArticulationLink_Children )
{}
PX_PHYSX_CORE_API PxArticulationLinkGeneratedValues::PxArticulationLinkGeneratedValues( const PxArticulationLink* inSource )
		:PxRigidBodyGeneratedValues( inSource )
		,InboundJoint( getPxArticulationLink_InboundJoint( inSource ) )
{
}
_Bool getPxSphereGeometry_IsValid( const PxSphereGeometry* inObj ) { return inObj->isValid(); }
inline PxReal getPxSphereGeometryRadius( const PxSphereGeometry* inOwner ) { return inOwner->radius; }
inline void setPxSphereGeometryRadius( PxSphereGeometry* inOwner, PxReal inData) { inOwner->radius = inData; }
PX_PHYSX_CORE_API PxSphereGeometryGeneratedInfo::PxSphereGeometryGeneratedInfo()
	: IsValid( "IsValid", getPxSphereGeometry_IsValid)
	, Radius( "Radius", setPxSphereGeometryRadius, getPxSphereGeometryRadius )
{}
PX_PHYSX_CORE_API PxSphereGeometryGeneratedValues::PxSphereGeometryGeneratedValues( const PxSphereGeometry* inSource )
		:PxGeometryGeneratedValues( inSource )
		,IsValid( getPxSphereGeometry_IsValid( inSource ) )
		,Radius( inSource->radius )
{
}
_Bool getPxBoxGeometry_IsValid( const PxBoxGeometry* inObj ) { return inObj->isValid(); }
inline PxVec3 getPxBoxGeometryHalfExtents( const PxBoxGeometry* inOwner ) { return inOwner->halfExtents; }
inline void setPxBoxGeometryHalfExtents( PxBoxGeometry* inOwner, PxVec3 inData) { inOwner->halfExtents = inData; }
PX_PHYSX_CORE_API PxBoxGeometryGeneratedInfo::PxBoxGeometryGeneratedInfo()
	: IsValid( "IsValid", getPxBoxGeometry_IsValid)
	, HalfExtents( "HalfExtents", setPxBoxGeometryHalfExtents, getPxBoxGeometryHalfExtents )
{}
PX_PHYSX_CORE_API PxBoxGeometryGeneratedValues::PxBoxGeometryGeneratedValues( const PxBoxGeometry* inSource )
		:PxGeometryGeneratedValues( inSource )
		,IsValid( getPxBoxGeometry_IsValid( inSource ) )
		,HalfExtents( inSource->halfExtents )
{
}
_Bool getPxCapsuleGeometry_IsValid( const PxCapsuleGeometry* inObj ) { return inObj->isValid(); }
inline PxReal getPxCapsuleGeometryRadius( const PxCapsuleGeometry* inOwner ) { return inOwner->radius; }
inline void setPxCapsuleGeometryRadius( PxCapsuleGeometry* inOwner, PxReal inData) { inOwner->radius = inData; }
inline PxReal getPxCapsuleGeometryHalfHeight( const PxCapsuleGeometry* inOwner ) { return inOwner->halfHeight; }
inline void setPxCapsuleGeometryHalfHeight( PxCapsuleGeometry* inOwner, PxReal inData) { inOwner->halfHeight = inData; }
PX_PHYSX_CORE_API PxCapsuleGeometryGeneratedInfo::PxCapsuleGeometryGeneratedInfo()
	: IsValid( "IsValid", getPxCapsuleGeometry_IsValid)
	, Radius( "Radius", setPxCapsuleGeometryRadius, getPxCapsuleGeometryRadius )
	, HalfHeight( "HalfHeight", setPxCapsuleGeometryHalfHeight, getPxCapsuleGeometryHalfHeight )
{}
PX_PHYSX_CORE_API PxCapsuleGeometryGeneratedValues::PxCapsuleGeometryGeneratedValues( const PxCapsuleGeometry* inSource )
		:PxGeometryGeneratedValues( inSource )
		,IsValid( getPxCapsuleGeometry_IsValid( inSource ) )
		,Radius( inSource->radius )
		,HalfHeight( inSource->halfHeight )
{
}
_Bool getPxPlaneGeometry_IsValid( const PxPlaneGeometry* inObj ) { return inObj->isValid(); }
PX_PHYSX_CORE_API PxPlaneGeometryGeneratedInfo::PxPlaneGeometryGeneratedInfo()
	: IsValid( "IsValid", getPxPlaneGeometry_IsValid)
{}
PX_PHYSX_CORE_API PxPlaneGeometryGeneratedValues::PxPlaneGeometryGeneratedValues( const PxPlaneGeometry* inSource )
		:PxGeometryGeneratedValues( inSource )
		,IsValid( getPxPlaneGeometry_IsValid( inSource ) )
{
}
_Bool getPxConvexMeshGeometry_IsValid( const PxConvexMeshGeometry* inObj ) { return inObj->isValid(); }
inline PxMeshScale getPxConvexMeshGeometryScale( const PxConvexMeshGeometry* inOwner ) { return inOwner->scale; }
inline void setPxConvexMeshGeometryScale( PxConvexMeshGeometry* inOwner, PxMeshScale inData) { inOwner->scale = inData; }
inline PxConvexMesh * getPxConvexMeshGeometryConvexMesh( const PxConvexMeshGeometry* inOwner ) { return inOwner->convexMesh; }
inline void setPxConvexMeshGeometryConvexMesh( PxConvexMeshGeometry* inOwner, PxConvexMesh * inData) { inOwner->convexMesh = inData; }
PX_PHYSX_CORE_API PxConvexMeshGeometryGeneratedInfo::PxConvexMeshGeometryGeneratedInfo()
	: IsValid( "IsValid", getPxConvexMeshGeometry_IsValid)
	, Scale( "Scale", setPxConvexMeshGeometryScale, getPxConvexMeshGeometryScale )
	, ConvexMesh( "ConvexMesh", setPxConvexMeshGeometryConvexMesh, getPxConvexMeshGeometryConvexMesh )
{}
PX_PHYSX_CORE_API PxConvexMeshGeometryGeneratedValues::PxConvexMeshGeometryGeneratedValues( const PxConvexMeshGeometry* inSource )
		:PxGeometryGeneratedValues( inSource )
		,IsValid( getPxConvexMeshGeometry_IsValid( inSource ) )
		,Scale( inSource->scale )
		,ConvexMesh( inSource->convexMesh )
{
}
_Bool getPxTriangleMeshGeometry_IsValid( const PxTriangleMeshGeometry* inObj ) { return inObj->isValid(); }
inline PxMeshScale getPxTriangleMeshGeometryScale( const PxTriangleMeshGeometry* inOwner ) { return inOwner->scale; }
inline void setPxTriangleMeshGeometryScale( PxTriangleMeshGeometry* inOwner, PxMeshScale inData) { inOwner->scale = inData; }
inline PxMeshGeometryFlags getPxTriangleMeshGeometryMeshFlags( const PxTriangleMeshGeometry* inOwner ) { return inOwner->meshFlags; }
inline void setPxTriangleMeshGeometryMeshFlags( PxTriangleMeshGeometry* inOwner, PxMeshGeometryFlags inData) { inOwner->meshFlags = inData; }
inline PxTriangleMesh * getPxTriangleMeshGeometryTriangleMesh( const PxTriangleMeshGeometry* inOwner ) { return inOwner->triangleMesh; }
inline void setPxTriangleMeshGeometryTriangleMesh( PxTriangleMeshGeometry* inOwner, PxTriangleMesh * inData) { inOwner->triangleMesh = inData; }
PX_PHYSX_CORE_API PxTriangleMeshGeometryGeneratedInfo::PxTriangleMeshGeometryGeneratedInfo()
	: IsValid( "IsValid", getPxTriangleMeshGeometry_IsValid)
	, Scale( "Scale", setPxTriangleMeshGeometryScale, getPxTriangleMeshGeometryScale )
	, MeshFlags( "MeshFlags", setPxTriangleMeshGeometryMeshFlags, getPxTriangleMeshGeometryMeshFlags )
	, TriangleMesh( "TriangleMesh", setPxTriangleMeshGeometryTriangleMesh, getPxTriangleMeshGeometryTriangleMesh )
{}
PX_PHYSX_CORE_API PxTriangleMeshGeometryGeneratedValues::PxTriangleMeshGeometryGeneratedValues( const PxTriangleMeshGeometry* inSource )
		:PxGeometryGeneratedValues( inSource )
		,IsValid( getPxTriangleMeshGeometry_IsValid( inSource ) )
		,Scale( inSource->scale )
		,MeshFlags( inSource->meshFlags )
		,TriangleMesh( inSource->triangleMesh )
{
}
_Bool getPxHeightFieldGeometry_IsValid( const PxHeightFieldGeometry* inObj ) { return inObj->isValid(); }
inline PxHeightField * getPxHeightFieldGeometryHeightField( const PxHeightFieldGeometry* inOwner ) { return inOwner->heightField; }
inline void setPxHeightFieldGeometryHeightField( PxHeightFieldGeometry* inOwner, PxHeightField * inData) { inOwner->heightField = inData; }
inline PxReal getPxHeightFieldGeometryHeightScale( const PxHeightFieldGeometry* inOwner ) { return inOwner->heightScale; }
inline void setPxHeightFieldGeometryHeightScale( PxHeightFieldGeometry* inOwner, PxReal inData) { inOwner->heightScale = inData; }
inline PxReal getPxHeightFieldGeometryRowScale( const PxHeightFieldGeometry* inOwner ) { return inOwner->rowScale; }
inline void setPxHeightFieldGeometryRowScale( PxHeightFieldGeometry* inOwner, PxReal inData) { inOwner->rowScale = inData; }
inline PxReal getPxHeightFieldGeometryColumnScale( const PxHeightFieldGeometry* inOwner ) { return inOwner->columnScale; }
inline void setPxHeightFieldGeometryColumnScale( PxHeightFieldGeometry* inOwner, PxReal inData) { inOwner->columnScale = inData; }
inline PxMeshGeometryFlags getPxHeightFieldGeometryHeightFieldFlags( const PxHeightFieldGeometry* inOwner ) { return inOwner->heightFieldFlags; }
inline void setPxHeightFieldGeometryHeightFieldFlags( PxHeightFieldGeometry* inOwner, PxMeshGeometryFlags inData) { inOwner->heightFieldFlags = inData; }
PX_PHYSX_CORE_API PxHeightFieldGeometryGeneratedInfo::PxHeightFieldGeometryGeneratedInfo()
	: IsValid( "IsValid", getPxHeightFieldGeometry_IsValid)
	, HeightField( "HeightField", setPxHeightFieldGeometryHeightField, getPxHeightFieldGeometryHeightField )
	, HeightScale( "HeightScale", setPxHeightFieldGeometryHeightScale, getPxHeightFieldGeometryHeightScale )
	, RowScale( "RowScale", setPxHeightFieldGeometryRowScale, getPxHeightFieldGeometryRowScale )
	, ColumnScale( "ColumnScale", setPxHeightFieldGeometryColumnScale, getPxHeightFieldGeometryColumnScale )
	, HeightFieldFlags( "HeightFieldFlags", setPxHeightFieldGeometryHeightFieldFlags, getPxHeightFieldGeometryHeightFieldFlags )
{}
PX_PHYSX_CORE_API PxHeightFieldGeometryGeneratedValues::PxHeightFieldGeometryGeneratedValues( const PxHeightFieldGeometry* inSource )
		:PxGeometryGeneratedValues( inSource )
		,IsValid( getPxHeightFieldGeometry_IsValid( inSource ) )
		,HeightField( inSource->heightField )
		,HeightScale( inSource->heightScale )
		,RowScale( inSource->rowScale )
		,ColumnScale( inSource->columnScale )
		,HeightFieldFlags( inSource->heightFieldFlags )
{
}
void setPxArticulationJoint_ParentPose( PxArticulationJoint* inObj, const PxTransform & inArg){ inObj->setParentPose( inArg ); }
PxTransform getPxArticulationJoint_ParentPose( const PxArticulationJoint* inObj ) { return inObj->getParentPose(); }
void setPxArticulationJoint_ChildPose( PxArticulationJoint* inObj, const PxTransform & inArg){ inObj->setChildPose( inArg ); }
PxTransform getPxArticulationJoint_ChildPose( const PxArticulationJoint* inObj ) { return inObj->getChildPose(); }
void setPxArticulationJoint_TargetOrientation( PxArticulationJoint* inObj, const PxQuat & inArg){ inObj->setTargetOrientation( inArg ); }
PxQuat getPxArticulationJoint_TargetOrientation( const PxArticulationJoint* inObj ) { return inObj->getTargetOrientation(); }
void setPxArticulationJoint_TargetVelocity( PxArticulationJoint* inObj, const PxVec3 & inArg){ inObj->setTargetVelocity( inArg ); }
PxVec3 getPxArticulationJoint_TargetVelocity( const PxArticulationJoint* inObj ) { return inObj->getTargetVelocity(); }
void setPxArticulationJoint_Spring( PxArticulationJoint* inObj, PxReal inArg){ inObj->setSpring( inArg ); }
PxReal getPxArticulationJoint_Spring( const PxArticulationJoint* inObj ) { return inObj->getSpring(); }
void setPxArticulationJoint_Damping( PxArticulationJoint* inObj, PxReal inArg){ inObj->setDamping( inArg ); }
PxReal getPxArticulationJoint_Damping( const PxArticulationJoint* inObj ) { return inObj->getDamping(); }
void setPxArticulationJoint_InternalCompliance( PxArticulationJoint* inObj, PxReal inArg){ inObj->setInternalCompliance( inArg ); }
PxReal getPxArticulationJoint_InternalCompliance( const PxArticulationJoint* inObj ) { return inObj->getInternalCompliance(); }
void setPxArticulationJoint_ExternalCompliance( PxArticulationJoint* inObj, PxReal inArg){ inObj->setExternalCompliance( inArg ); }
PxReal getPxArticulationJoint_ExternalCompliance( const PxArticulationJoint* inObj ) { return inObj->getExternalCompliance(); }
void setPxArticulationJoint_SwingLimit( PxArticulationJoint* inObj, PxReal inArg0, PxReal inArg1 ) { inObj->setSwingLimit( inArg0, inArg1 ); }
void getPxArticulationJoint_SwingLimit( const PxArticulationJoint* inObj, PxReal& inArg0, PxReal& inArg1 ) { inObj->getSwingLimit( inArg0, inArg1 ); }
void setPxArticulationJoint_TangentialSpring( PxArticulationJoint* inObj, PxReal inArg){ inObj->setTangentialSpring( inArg ); }
PxReal getPxArticulationJoint_TangentialSpring( const PxArticulationJoint* inObj ) { return inObj->getTangentialSpring(); }
void setPxArticulationJoint_TangentialDamping( PxArticulationJoint* inObj, PxReal inArg){ inObj->setTangentialDamping( inArg ); }
PxReal getPxArticulationJoint_TangentialDamping( const PxArticulationJoint* inObj ) { return inObj->getTangentialDamping(); }
void setPxArticulationJoint_SwingLimitContactDistance( PxArticulationJoint* inObj, PxReal inArg){ inObj->setSwingLimitContactDistance( inArg ); }
PxReal getPxArticulationJoint_SwingLimitContactDistance( const PxArticulationJoint* inObj ) { return inObj->getSwingLimitContactDistance(); }
void setPxArticulationJoint_SwingLimitEnabled( PxArticulationJoint* inObj, _Bool inArg){ inObj->setSwingLimitEnabled( inArg ); }
_Bool getPxArticulationJoint_SwingLimitEnabled( const PxArticulationJoint* inObj ) { return inObj->getSwingLimitEnabled(); }
void setPxArticulationJoint_TwistLimit( PxArticulationJoint* inObj, PxReal inArg0, PxReal inArg1 ) { inObj->setTwistLimit( inArg0, inArg1 ); }
void getPxArticulationJoint_TwistLimit( const PxArticulationJoint* inObj, PxReal& inArg0, PxReal& inArg1 ) { inObj->getTwistLimit( inArg0, inArg1 ); }
void setPxArticulationJoint_TwistLimitEnabled( PxArticulationJoint* inObj, _Bool inArg){ inObj->setTwistLimitEnabled( inArg ); }
_Bool getPxArticulationJoint_TwistLimitEnabled( const PxArticulationJoint* inObj ) { return inObj->getTwistLimitEnabled(); }
void setPxArticulationJoint_TwistLimitContactDistance( PxArticulationJoint* inObj, PxReal inArg){ inObj->setTwistLimitContactDistance( inArg ); }
PxReal getPxArticulationJoint_TwistLimitContactDistance( const PxArticulationJoint* inObj ) { return inObj->getTwistLimitContactDistance(); }
PX_PHYSX_CORE_API PxArticulationJointGeneratedInfo::PxArticulationJointGeneratedInfo()
	: ParentPose( "ParentPose", setPxArticulationJoint_ParentPose, getPxArticulationJoint_ParentPose)
	, ChildPose( "ChildPose", setPxArticulationJoint_ChildPose, getPxArticulationJoint_ChildPose)
	, TargetOrientation( "TargetOrientation", setPxArticulationJoint_TargetOrientation, getPxArticulationJoint_TargetOrientation)
	, TargetVelocity( "TargetVelocity", setPxArticulationJoint_TargetVelocity, getPxArticulationJoint_TargetVelocity)
	, Spring( "Spring", setPxArticulationJoint_Spring, getPxArticulationJoint_Spring)
	, Damping( "Damping", setPxArticulationJoint_Damping, getPxArticulationJoint_Damping)
	, InternalCompliance( "InternalCompliance", setPxArticulationJoint_InternalCompliance, getPxArticulationJoint_InternalCompliance)
	, ExternalCompliance( "ExternalCompliance", setPxArticulationJoint_ExternalCompliance, getPxArticulationJoint_ExternalCompliance)
	, SwingLimit( "SwingLimit", "yLimit", "zLimit", setPxArticulationJoint_SwingLimit, getPxArticulationJoint_SwingLimit)
	, TangentialSpring( "TangentialSpring", setPxArticulationJoint_TangentialSpring, getPxArticulationJoint_TangentialSpring)
	, TangentialDamping( "TangentialDamping", setPxArticulationJoint_TangentialDamping, getPxArticulationJoint_TangentialDamping)
	, SwingLimitContactDistance( "SwingLimitContactDistance", setPxArticulationJoint_SwingLimitContactDistance, getPxArticulationJoint_SwingLimitContactDistance)
	, SwingLimitEnabled( "SwingLimitEnabled", setPxArticulationJoint_SwingLimitEnabled, getPxArticulationJoint_SwingLimitEnabled)
	, TwistLimit( "TwistLimit", "lower", "upper", setPxArticulationJoint_TwistLimit, getPxArticulationJoint_TwistLimit)
	, TwistLimitEnabled( "TwistLimitEnabled", setPxArticulationJoint_TwistLimitEnabled, getPxArticulationJoint_TwistLimitEnabled)
	, TwistLimitContactDistance( "TwistLimitContactDistance", setPxArticulationJoint_TwistLimitContactDistance, getPxArticulationJoint_TwistLimitContactDistance)
{}
PX_PHYSX_CORE_API PxArticulationJointGeneratedValues::PxArticulationJointGeneratedValues( const PxArticulationJoint* inSource )
		:ParentPose( getPxArticulationJoint_ParentPose( inSource ) )
		,ChildPose( getPxArticulationJoint_ChildPose( inSource ) )
		,TargetOrientation( getPxArticulationJoint_TargetOrientation( inSource ) )
		,TargetVelocity( getPxArticulationJoint_TargetVelocity( inSource ) )
		,Spring( getPxArticulationJoint_Spring( inSource ) )
		,Damping( getPxArticulationJoint_Damping( inSource ) )
		,InternalCompliance( getPxArticulationJoint_InternalCompliance( inSource ) )
		,ExternalCompliance( getPxArticulationJoint_ExternalCompliance( inSource ) )
		,TangentialSpring( getPxArticulationJoint_TangentialSpring( inSource ) )
		,TangentialDamping( getPxArticulationJoint_TangentialDamping( inSource ) )
		,SwingLimitContactDistance( getPxArticulationJoint_SwingLimitContactDistance( inSource ) )
		,SwingLimitEnabled( getPxArticulationJoint_SwingLimitEnabled( inSource ) )
		,TwistLimitEnabled( getPxArticulationJoint_TwistLimitEnabled( inSource ) )
		,TwistLimitContactDistance( getPxArticulationJoint_TwistLimitContactDistance( inSource ) )
{
	getPxArticulationJoint_SwingLimit( inSource, SwingLimit[0], SwingLimit[1] );
	getPxArticulationJoint_TwistLimit( inSource, TwistLimit[0], TwistLimit[1] );
}
_Bool getPxMeshScale_IsIdentity( const PxMeshScale* inObj ) { return inObj->isIdentity(); }
PxMeshScale getPxMeshScale_Inverse( const PxMeshScale* inObj ) { return inObj->getInverse(); }
inline PxVec3 getPxMeshScaleScale( const PxMeshScale* inOwner ) { return inOwner->scale; }
inline void setPxMeshScaleScale( PxMeshScale* inOwner, PxVec3 inData) { inOwner->scale = inData; }
inline PxQuat getPxMeshScaleRotation( const PxMeshScale* inOwner ) { return inOwner->rotation; }
inline void setPxMeshScaleRotation( PxMeshScale* inOwner, PxQuat inData) { inOwner->rotation = inData; }
PX_PHYSX_CORE_API PxMeshScaleGeneratedInfo::PxMeshScaleGeneratedInfo()
	: IsIdentity( "IsIdentity", getPxMeshScale_IsIdentity)
	, Inverse( "Inverse", getPxMeshScale_Inverse)
	, Scale( "Scale", setPxMeshScaleScale, getPxMeshScaleScale )
	, Rotation( "Rotation", setPxMeshScaleRotation, getPxMeshScaleRotation )
{}
PX_PHYSX_CORE_API PxMeshScaleGeneratedValues::PxMeshScaleGeneratedValues( const PxMeshScale* inSource )
		:IsIdentity( getPxMeshScale_IsIdentity( inSource ) )
		,Inverse( getPxMeshScale_Inverse( inSource ) )
		,Scale( inSource->scale )
		,Rotation( inSource->rotation )
{
}
